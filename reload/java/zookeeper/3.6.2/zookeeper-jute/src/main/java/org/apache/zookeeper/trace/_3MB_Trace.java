// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper.trace;

import org.apache.jute.*;
import org.apache.jute.Record; // JDK14 needs explicit import due to clash with java.lang.Record
import org.apache.yetus.audience.InterfaceAudience;
@InterfaceAudience.Public
public class _3MB_Trace implements Record {
  private long id;
  private java.util.List<org.apache.zookeeper.trace._3MB_Event> Events;
  private java.util.List<org.apache.zookeeper.trace._3MB_TFI> tfis;
  private org.apache.zookeeper.trace._3MB_Trace trace;
  public _3MB_Trace() {
  }
  public _3MB_Trace(
        long id,
        java.util.List<org.apache.zookeeper.trace._3MB_Event> Events,
        java.util.List<org.apache.zookeeper.trace._3MB_TFI> tfis) {
    this.id=id;
    this.Events=Events;
    this.tfis=tfis;
  }
  public long getId() {
    return id;
  }
  public void setId(long m_) {
    id=m_;
  }
  public java.util.List<org.apache.zookeeper.trace._3MB_Event> getEvents() {
    return Events;
  }
  public void setEvents(java.util.List<org.apache.zookeeper.trace._3MB_Event> m_) {
    Events=m_;
  }
  public java.util.List<org.apache.zookeeper.trace._3MB_TFI> getTfis() {
    return tfis;
  }
  public void setTfis(java.util.List<org.apache.zookeeper.trace._3MB_TFI> m_) {
    tfis=m_;
  }
  public org.apache.zookeeper.trace._3MB_Trace getTrace() { return trace; }
  public void setTrace(org.apache.zookeeper.trace._3MB_Trace t_) { trace = t_; }
  public void serialize(OutputArchive a_, String tag) throws java.io.IOException {
    a_.startRecord(this,tag);
    a_.writeLong(id,"id");
    {
      a_.startVector(Events,"Events");
      if (Events!= null) {          int len1 = Events.size();
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            org.apache.zookeeper.trace._3MB_Event e1 = (org.apache.zookeeper.trace._3MB_Event) Events.get(vidx1);
    a_.writeRecord(e1,"e1");
          }
      }
      a_.endVector(Events,"Events");
    }
    {
      a_.startVector(tfis,"tfis");
      if (tfis!= null) {          int len1 = tfis.size();
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            org.apache.zookeeper.trace._3MB_TFI e1 = (org.apache.zookeeper.trace._3MB_TFI) tfis.get(vidx1);
    a_.writeRecord(e1,"e1");
          }
      }
      a_.endVector(tfis,"tfis");
    }
    a_.endRecord(this,tag);
  }
  public void deserialize(InputArchive a_, String tag) throws java.io.IOException {
    a_.startRecord(tag);
    id=a_.readLong("id");
    {
      Index vidx1 = a_.startVector("Events");
      if (vidx1!= null) {          Events=new java.util.ArrayList<org.apache.zookeeper.trace._3MB_Event>();
          for (; !vidx1.done(); vidx1.incr()) {
    org.apache.zookeeper.trace._3MB_Event e1;
    e1= new org.apache.zookeeper.trace._3MB_Event();
    a_.readRecord(e1,"e1");
            Events.add(e1);
          }
      }
    a_.endVector("Events");
    }
    {
      Index vidx1 = a_.startVector("tfis");
      if (vidx1!= null) {          tfis=new java.util.ArrayList<org.apache.zookeeper.trace._3MB_TFI>();
          for (; !vidx1.done(); vidx1.incr()) {
    org.apache.zookeeper.trace._3MB_TFI e1;
    e1= new org.apache.zookeeper.trace._3MB_TFI();
    a_.readRecord(e1,"e1");
            tfis.add(e1);
          }
      }
    a_.endVector("tfis");
    }
    a_.endRecord(tag);
}
  public String toString() {
    try {
      java.io.ByteArrayOutputStream s =
        new java.io.ByteArrayOutputStream();
      ToStringOutputArchive a_ = 
        new ToStringOutputArchive(s);
      a_.startRecord(this,"");
    a_.writeLong(id,"id");
    {
      a_.startVector(Events,"Events");
      if (Events!= null) {          int len1 = Events.size();
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            org.apache.zookeeper.trace._3MB_Event e1 = (org.apache.zookeeper.trace._3MB_Event) Events.get(vidx1);
    a_.writeRecord(e1,"e1");
          }
      }
      a_.endVector(Events,"Events");
    }
    {
      a_.startVector(tfis,"tfis");
      if (tfis!= null) {          int len1 = tfis.size();
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            org.apache.zookeeper.trace._3MB_TFI e1 = (org.apache.zookeeper.trace._3MB_TFI) tfis.get(vidx1);
    a_.writeRecord(e1,"e1");
          }
      }
      a_.endVector(tfis,"tfis");
    }
      a_.endRecord(this,"");
      return new String(s.toByteArray(), "UTF-8");
    } catch (Throwable ex) {
      ex.printStackTrace();
    }
    return "ERROR";
  }
  public void write(java.io.DataOutput out) throws java.io.IOException {
    BinaryOutputArchive archive = new BinaryOutputArchive(out);
    serialize(archive, "");
  }
  public void readFields(java.io.DataInput in) throws java.io.IOException {
    BinaryInputArchive archive = new BinaryInputArchive(in);
    deserialize(archive, "");
  }
  public int compareTo (Object peer_) throws ClassCastException {
    throw new UnsupportedOperationException("comparing Trace is unimplemented");
  }
  public boolean equals(Object peer_) {
    if (!(peer_ instanceof _3MB_Trace)) {
      return false;
    }
    if (peer_ == this) {
      return true;
    }
    _3MB_Trace peer = (_3MB_Trace) peer_;
    boolean ret = false;
    ret = (id==peer.id);
    if (!ret) return ret;
    ret = Events.equals(peer.Events);
    if (!ret) return ret;
    ret = tfis.equals(peer.tfis);
    if (!ret) return ret;
     return ret;
  }
  public int hashCode() {
    int result = 17;
    int ret;
    ret = (int) (id^(id>>>32));
    result = 37*result + ret;
    ret = Events.hashCode();
    result = 37*result + ret;
    ret = tfis.hashCode();
    result = 37*result + ret;
    return result;
  }
  public static String signature() {
    return "LTrace(l[LEvent(ilsss)][LTFI(isl[LTFIMeta(sll)])])";
  }
}
