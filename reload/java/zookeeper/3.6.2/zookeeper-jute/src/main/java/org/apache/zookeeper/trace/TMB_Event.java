// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper.trace;

import org.apache.jute.*;
import org.apache.jute.Record;
import org.apache.yetus.audience.InterfaceAudience;

@InterfaceAudience.Public
public class TMB_Event implements Record {
  // service-level
  public static final int SERVICE_PREFIX = 0x000;
  public static final int SERVICE_SEND = SERVICE_PREFIX | 0x1;
  public static final int SERVICE_RECV = SERVICE_PREFIX | 0x2;
  public static final int SERVICE_FRWD = SERVICE_PREFIX | 0x4; // follower forward
  public static final int SERVICE_PRSL = SERVICE_PREFIX | 0x8; // leader proposal
  // processor-level
  public static final int PROCSSR_PREFIX = 0x080;
  public static final int PROCSSR_RECV = PROCSSR_PREFIX | 0x1;
  // logical
  public static final int LOGICAL_PREFIX = 0x800;
  public static final int LOGICAL_COMMIT_READY = LOGICAL_PREFIX | 0x1;
  public static final int TYPE_MASK = 0xFFF;

  private int type;
  private long timestamp;
  private String message_name;
  private String uuid;
  private String service;
  private String processor; // Zookeeper specified field
  public TMB_Event() {
  }
  public TMB_Event(
        int type,
        long timestamp,
        String message_name,
        String uuid,
        String service,
        Class processor) {
    this.type=type;
    this.timestamp=timestamp;
    this.message_name=message_name;
    this.uuid=uuid;
    this.service=service;
    this.processor=TMB_Helper.getClassNameFromClass(processor);

    // TMB_Helper.printf(3, "[%s] a new event: %s", service, this);
  }

  // 3MileBeach starts
  public String getTypeString() {
    switch (type) {
      case SERVICE_SEND:
        return "S_SEND";
      case SERVICE_RECV:
        return "S_RECV";
      case SERVICE_FRWD:
        return "S_FRWD";
      case SERVICE_PRSL:
        return "S_PRSL";
      case PROCSSR_RECV:
        return "P_RECV";
      case LOGICAL_COMMIT_READY:
        return "L_COMMITREADY";
      default:
        return "UNKNOWN";
    }
  }

  public String toJSON() {
    return String.format("{\"service\":\"%s\",\"timestamp\":%d,\"type\":\"%s\",\"message_name\":\"%s\",\"uuid\":\"%s\",\"processor\":\"%s\"}",
              this.getService(), this.getTimestamp(), this.getTypeString(), this.getMessage_name(), this.getUuid(), this.getProcessor());
  }
  // 3MileBeach ends

  public int getType() {
    return type;
  }
  public void setType(int m_) {
    type=m_;
  }
  public long getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(long m_) {
    timestamp=m_;
  }
  public String getMessage_name() {
    return message_name;
  }
  public void setMessage_name(String m_) {
    message_name=m_;
  }
  public String getUuid() {
    return uuid;
  }
  public void setUuid(String m_) {
    uuid=m_;
  }
  public String getService() {
    return service;
  }
  public void setService(String m_) {
    service=m_;
  }
  public String getProcessor() {
    return processor;
  }
  public void setProcessor(String m_) {
    processor=m_;
  }
  public org.apache.zookeeper.trace.TMB_Trace getTrace() {
    return null;
  }
  public void setTrace(org.apache.zookeeper.trace.TMB_Trace m_) {}
  public void serialize(OutputArchive a_, String tag) throws java.io.IOException {
    a_.startRecord(this,tag);
    a_.writeInt(type,"type");
    a_.writeLong(timestamp,"timestamp");
    a_.writeString(message_name,"message_name");
    a_.writeString(uuid,"uuid");
    a_.writeString(service,"service");
    a_.writeString(processor,"processor");
    a_.endRecord(this,tag);
  }
  public void deserialize(InputArchive a_, String tag) throws java.io.IOException {
    a_.startRecord(tag);
    type=a_.readInt("type");
    timestamp=a_.readLong("timestamp");
    message_name=a_.readString("message_name");
    uuid=a_.readString("uuid");
    service=a_.readString("service");
    processor=a_.readString("processor");
    a_.endRecord(tag);
}
  public String toString() {
    try {
      java.io.ByteArrayOutputStream s =
        new java.io.ByteArrayOutputStream();
      ToStringOutputArchive a_ = 
        new ToStringOutputArchive(s);
      a_.startRecord(this,"");
    a_.writeInt(type,"type");
    a_.writeLong(timestamp,"timestamp");
    a_.writeString(message_name,"message_name");
    a_.writeString(uuid,"uuid");
    a_.writeString(service,"service");
    a_.writeString(processor,"processor");
      a_.endRecord(this,"");
      return new String(s.toByteArray(), "UTF-8");
    } catch (Throwable ex) {
      ex.printStackTrace();
    }
    return "ERROR";
  }
  public void write(java.io.DataOutput out) throws java.io.IOException {
    BinaryOutputArchive archive = new BinaryOutputArchive(out);
    serialize(archive, "");
  }
  public void readFields(java.io.DataInput in) throws java.io.IOException {
    BinaryInputArchive archive = new BinaryInputArchive(in);
    deserialize(archive, "");
  }
  public int compareTo (Object peer_) throws ClassCastException {
    if (!(peer_ instanceof TMB_Event)) {
      throw new ClassCastException("Comparing different types of records.");
    }
    TMB_Event peer = (TMB_Event) peer_;
    int ret = 0;
    ret = (type == peer.type)? 0 :((type<peer.type)?-1:1);
    if (ret != 0) return ret;
    ret = (timestamp == peer.timestamp)? 0 :((timestamp<peer.timestamp)?-1:1);
    if (ret != 0) return ret;
    ret = message_name.compareTo(peer.message_name);
    if (ret != 0) return ret;
    ret = uuid.compareTo(peer.uuid);
    if (ret != 0) return ret;
    ret = service.compareTo(peer.service);
    if (ret != 0) return ret;
    ret = processor.compareTo(peer.processor);
    if (ret != 0) return ret;
     return ret;
  }
  public boolean equals(Object peer_) {
    if (!(peer_ instanceof TMB_Event)) {
      return false;
    }
    if (peer_ == this) {
      return true;
    }
    TMB_Event peer = (TMB_Event) peer_;
    boolean ret = false;
    ret = (type==peer.type);
    if (!ret) return ret;
    ret = (timestamp==peer.timestamp);
    if (!ret) return ret;
    ret = message_name.equals(peer.message_name);
    if (!ret) return ret;
    ret = uuid.equals(peer.uuid);
    if (!ret) return ret;
    ret = service.equals(peer.service);
    if (!ret) return ret;
    ret = processor.equals(peer.processor);
    if (!ret) return ret;
     return ret;
  }
  public int hashCode() {
    int result = 17;
    int ret;
    ret = (int)type;
    result = 37*result + ret;
    ret = (int) (timestamp^(timestamp>>>32));
    result = 37*result + ret;
    ret = message_name.hashCode();
    result = 37*result + ret;
    ret = uuid.hashCode();
    result = 37*result + ret;
    ret = service.hashCode();
    result = 37*result + ret;
    ret = processor.hashCode();
    result = 37*result + ret;
    return result;
  }
  public static String signature() {
    return "LTMB_Event(ilssss)";
  }
}
