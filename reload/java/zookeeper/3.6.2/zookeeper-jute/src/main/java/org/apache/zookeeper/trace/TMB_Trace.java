// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper.trace;

import org.apache.jute.*;
import org.apache.jute.Record;
import org.apache.yetus.audience.InterfaceAudience;

import java.util.ArrayList;
import java.util.List;

/**
 * 3MileBeach Payload
 * Do not append any events to an instance with id = 0!
 */
@InterfaceAudience.Public
public class TMB_Trace implements Record {
  private long id;
  private long req_event; // TODO: (a) delete
  private java.util.List<TMB_Event> events;
  private java.util.List<TMB_TFI> tfis;
  public TMB_Trace() {
    this.events=TMB_Record.EMPTY_EVENTS;
    this.tfis=TMB_Record.EMPTY_TFIS;
  }
  public TMB_Trace(
        long id,
        long req_event,
        java.util.List<TMB_Event> events,
        java.util.List<TMB_TFI> tfis) {
    this.id=id;
    this.req_event=req_event;
    this.events=events == null ? TMB_Record.EMPTY_EVENTS: events;
    this.tfis=tfis == null ? TMB_Record.EMPTY_TFIS: tfis;
  }
  public String toJSON() {
    StringBuffer buffer = new StringBuffer();
    toJSON(buffer);
    return buffer.toString();
  }
  public void toJSON(StringBuffer buffer) {
    buffer.append(String.format("{\"id\":%d,\"req_event\":%d,\"events\":[", id, req_event));
    int iEvents = 0;
    for (TMB_Event event: events) {
      if (iEvents != 0) {
        buffer.append(",");
      }
      event.toJSON(buffer);
      iEvents++;
    }
    buffer.append("],\"tfis\":[");
    int iTFIs = 0;
    for (TMB_TFI tfi: tfis) {
      if (iTFIs != 0) {
        buffer.append(",");
      }
      tfi.toJSON(buffer);
      iTFIs++;
    }
    buffer.append("]}");
  }
  public TMB_Trace copy() {
    List<TMB_Event> events_ = new ArrayList<>(events.size());
    events_.addAll(events);

    int tfiSize = tfis.size();
    List<TMB_TFI> tfis_ = new ArrayList<>(tfiSize);
    for (TMB_TFI tfi: tfis) {
      tfis_.add(tfi.copy());
    }

    return new TMB_Trace(id, req_event, events_, tfis_);
  }
  /**
   * Make sure 1) called by all events growth functions (except assignments); 2) called after checking enable()
   * @param e
   */
  public void addEventUnsafe(TMB_Event e) {
    events.add(e);
    updateTFIs(e);
  }
  /**
   * @param e
   */
  public void addEvent(TMB_Event e) {
    if (enabled()) {
      addEventUnsafe(e);
    }
  }
  /**
   * Appends new event with all essential information (eventType, messageName, uuid).
   * @param procMeta
   * @param eventType
   * @param messageName
   * @param uuid
   * @return
   */
  public void addEvent(TMB_Store.ProcessorMeta procMeta, int eventType, String messageName, String uuid) {
    if (enabled()) {
      addEventUnsafe(new TMB_Event(eventType, messageName, uuid, procMeta));
    }
  }
  /**
   * Appends new event with eventType and messageName.
   * Other information (uuid) is derived from last event of the current trace from record.
   * @param procMeta
   * @param eventType
   * @param messageName
   * @return
   */
  public void addEvent(TMB_Store.ProcessorMeta procMeta, int eventType, String messageName) {
    if (hasEvents()) {
      int eventSize = events.size();
      TMB_Event lastEvent = events.get(eventSize - 1);
      String uuid = lastEvent.getUuid();
      addEventUnsafe(new TMB_Event(eventType, messageName, uuid, procMeta));
    }
  }
  /**
   * Appends new event with eventType.
   * Other information (messageName, uuid) are derived from last event of the current trace from record.
   * @param procMeta
   * @param eventType
   * @return
   */
  public void addEvent(TMB_Store.ProcessorMeta procMeta, int eventType) {
    if (hasEvents()) {
      int eventSize = events.size();
      TMB_Event lastEvent = events.get(eventSize - 1);
      String uuid = lastEvent.getUuid();
      String messageName = lastEvent.getMessage_name();
      addEventUnsafe(new TMB_Event(eventType, messageName, uuid, procMeta));
    }
  }
  /**
   * Unsafe under race conditions, make sure instance is 1) a copy from TMB_Store; 2) operated by only one thread
   * @param events_
   */
  public void mergeEventsUnsafe(List<TMB_Event> events_) {
    for (TMB_Event event_: events_) {
      boolean found = false;
      for (TMB_Event event: events) {
        found = event.equals(event_);
        if (found) {
          break;
        }
      }
      if (!found) {
        addEventUnsafe(event_);
      }
    }
  }
  public boolean enabled() {
    return id > 0;
  }
  public boolean hasEvents() {
    return id > 0 && events.size() > 0;
  }
  public int getEventSize() {
    return events.size();
  }
  // 3MileBeach ends
  public long getReqEvent() {
    return req_event;
  }
  public void setReqEvent(long m_) { req_event=m_; }
  public long getId() {
    return id;
  }
  public void setId(long m_) {
    id=m_;
  }
  public java.util.List<TMB_Event> getEvents() {
    return events;
  }
  public void setEvents(java.util.List<TMB_Event> m_) {
    events=m_;
  }
  // 3MileBeach starts
  public void setEvents(java.util.List<TMB_Event> m_, int newEvents) {
    events=m_;

    for (int i = m_.size() - newEvents; i < m_.size(); i ++) {
      updateTFIs(m_.get(i));
    }
  }
  /**
   *
   * @param id make sure id is valid: 1) 0 <= id < events.size(); 2) id = -1
   * @return
   */
  public TMB_Event getEventUnsafe(int id) {
    if (id == -1) {
      return getLastEvent();
    }
    return events.get(id);
  }
  public TMB_Event getLastEvent() {
    int eventSize = events.size();
    if (eventSize > 0) {
      return events.get(eventSize - 1);
    }
    return null;
  }
  /**
   * make sure 0 <= fromIndex <= toIndex <= events.size()
   * @param fromIndex
   * @param toIndex
   * @return
   */
  public List<TMB_Event> getEventsUnsafe(int fromIndex, int toIndex) {
    return events.subList(fromIndex, toIndex);
  }
  public void updateTFIs(TMB_Event event) {
    boolean updated = false;
    for (TMB_TFI tfi: tfis) {
      for (TMB_TFIMeta meta: tfi.getAfter()) {
        if (meta.getName().equals(event.getMessage_name()) && meta.getEvent_type() == event.getType()) {
          updated = true;
          meta.setAlready(meta.getAlready() + 1);
        }
      }
    }

    if (updated) {
      TMB_Helper.printf("[TMB_Store] updated!!! %s, %s\n", tfis, event);
    }
  }
  public void updateTFIs(List<TMB_Event> events) {
    for (TMB_Event event: events) {
      updateTFIs(event);
    }
  }
  public void checkTFIs(String messageName) throws FaultInjectedException {
    for (TMB_TFI tfi: this.tfis) {
      if (tfi.getName().equals(messageName) && (tfi.getEvent_type() & TMB_Event.Type.SERVICE_SEND) != 0) {
        List<TMB_TFIMeta> metas = tfi.getAfter();
        boolean injected = true;
        if (metas != null && metas.size() > 0) {
          for (TMB_TFIMeta meta : tfi.getAfter()) {
            if (meta.getAlready() < meta.getTimes()) {
              injected = false;
              break;
            }
          }
        }

        if (injected) {
          throw new FaultInjectedException(tfi.getType(), tfi.getDelay());
        }
      }
    }
  }
  // 3MileBeach ends
  public java.util.List<TMB_TFI> getTfis() {
    return tfis;
  }
  public void setTfis(java.util.List<TMB_TFI> m_) {
    tfis=m_;
  }
  public org.apache.zookeeper.trace.TMB_Trace getTrace() {
    return null;
  }
  public void setTrace(org.apache.zookeeper.trace.TMB_Trace m_) {}
  public void serialize(OutputArchive a_, String tag) throws java.io.IOException {
    a_.startRecord(this,tag);
    a_.writeLong(id,"id");
    a_.writeLong(req_event,"req_event");
    {
      a_.startVector(events,"events");
      if (events!= null) {          int len1 = events.size();
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            TMB_Event e1 = (TMB_Event) events.get(vidx1);
    a_.writeRecord(e1,"e1");
          }
      }
      a_.endVector(events,"events");
    }
    {
      a_.startVector(tfis,"tfis");
      if (tfis!= null) {          int len1 = tfis.size();
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            TMB_TFI e1 = (TMB_TFI) tfis.get(vidx1);
    a_.writeRecord(e1,"e1");
          }
      }
      a_.endVector(tfis,"tfis");
    }
    a_.endRecord(this,tag);
  }
  public void deserialize(InputArchive a_, String tag) throws java.io.IOException {
    a_.startRecord(tag);
    id=a_.readLong("id");
    req_event=a_.readLong("req_event");
    {
      Index vidx1 = a_.startVector("events");
      if (vidx1!= null) {          events=new java.util.ArrayList<TMB_Event>();
          for (; !vidx1.done(); vidx1.incr()) {
    TMB_Event e1;
    e1= new TMB_Event();
    a_.readRecord(e1,"e1");
            events.add(e1);
          }
      }
    a_.endVector("events");
    }
    {
      Index vidx1 = a_.startVector("tfis");
      if (vidx1!= null) {          tfis=new java.util.ArrayList<TMB_TFI>();
          for (; !vidx1.done(); vidx1.incr()) {
    TMB_TFI e1;
    e1= new TMB_TFI();
    a_.readRecord(e1,"e1");
            tfis.add(e1);
          }
      }
    a_.endVector("tfis");
    }
    a_.endRecord(tag);
}
  public String toString() {
    try {
      java.io.ByteArrayOutputStream s =
        new java.io.ByteArrayOutputStream();
      ToStringOutputArchive a_ =
        new ToStringOutputArchive(s);
      a_.startRecord(this,"");
    a_.writeLong(id,"id");
    a_.writeLong(req_event,"req_event");
    {
      a_.startVector(events,"events");
      if (events!= null) {          int len1 = events.size();
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            TMB_Event e1 = (TMB_Event) events.get(vidx1);
    a_.writeRecord(e1,"e1");
          }
      }
      a_.endVector(events,"events");
    }
    {
      a_.startVector(tfis,"tfis");
      if (tfis!= null) {          int len1 = tfis.size();
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            TMB_TFI e1 = (TMB_TFI) tfis.get(vidx1);
    a_.writeRecord(e1,"e1");
          }
      }
      a_.endVector(tfis,"tfis");
    }
      a_.endRecord(this,"");
      return new String(s.toByteArray(), "UTF-8");
    } catch (Throwable ex) {
      ex.printStackTrace();
    }
    return "ERROR";
  }
  public void write(java.io.DataOutput out) throws java.io.IOException {
    BinaryOutputArchive archive = new BinaryOutputArchive(out);
    serialize(archive, "");
  }
  public void readFields(java.io.DataInput in) throws java.io.IOException {
    BinaryInputArchive archive = new BinaryInputArchive(in);
    deserialize(archive, "");
  }
  public int compareTo (Object peer_) throws ClassCastException {
    throw new UnsupportedOperationException("comparing TMB_Trace is unimplemented");
  }
  public boolean equals(Object peer_) {
    if (!(peer_ instanceof TMB_Trace)) {
      return false;
    }
    if (peer_ == this) {
      return true;
    }
    TMB_Trace peer = (TMB_Trace) peer_;
    boolean ret = false;
    ret = (id==peer.id);
    if (!ret) return ret;
    ret = (req_event==peer.req_event);
    if (!ret) return ret;
    ret = events.equals(peer.events);
    if (!ret) return ret;
    ret = tfis.equals(peer.tfis);
    if (!ret) return ret;
     return ret;
  }
  public int hashCode() {
    int result = 17;
    int ret;
    ret = (int) (id^(id>>>32));
    result = 37*result + ret;
    ret = (int) (req_event^(req_event>>>32));
    result = 37*result + ret;
    ret = events.hashCode();
    result = 37*result + ret;
    ret = tfis.hashCode();
    result = 37*result + ret;
    return result;
  }
  public static String signature() {
    return "LTMB_Trace(ll[LTMB_Event(ilsss)][LTMB_TFI(isl[LTMB_TFIMeta(sll)])])";
  }
}
