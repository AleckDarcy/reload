// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/instrumentation/v1alpha/monitoring.proto

package io.grpc.instrumentation.v1alpha;

/**
 * <pre>
 * This message is sent when requesting a set of stats (Census Views) from
 * a client system, as part of the MonitoringService API's.
 * </pre>
 *
 * Protobuf type {@code grpc.instrumentation.v1alpha.StatsRequest}
 */
public  final class StatsRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:grpc.instrumentation.v1alpha.StatsRequest)
    StatsRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use StatsRequest.newBuilder() to construct.
  private StatsRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StatsRequest() {
    viewNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    measurementNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    dontIncludeDescriptorsInFirstResponse_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private StatsRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              viewNames_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            viewNames_.add(s);
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              measurementNames_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            measurementNames_.add(s);
            break;
          }
          case 24: {

            dontIncludeDescriptorsInFirstResponse_ = input.readBool();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        viewNames_ = viewNames_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        measurementNames_ = measurementNames_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.grpc.instrumentation.v1alpha.MonitoringProto.internal_static_grpc_instrumentation_v1alpha_StatsRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.grpc.instrumentation.v1alpha.MonitoringProto.internal_static_grpc_instrumentation_v1alpha_StatsRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.grpc.instrumentation.v1alpha.StatsRequest.class, io.grpc.instrumentation.v1alpha.StatsRequest.Builder.class);
  }

  private int bitField0_;
  public static final int VIEW_NAMES_FIELD_NUMBER = 1;
  private com.google.protobuf.LazyStringList viewNames_;
  /**
   * <pre>
   * An optional set of ViewDescriptor names. Only Views using these
   * descriptors will be sent back in the response. If no names are provided,
   * then all Views present in the client system will be included in every
   * response. If measurement_names is also provided, then Views matching the
   * intersection of the two are returned.
   * TODO(aveitch): Consider making this a list of regexes or prefix matches in
   * the future.
   * </pre>
   *
   * <code>repeated string view_names = 1;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getViewNamesList() {
    return viewNames_;
  }
  /**
   * <pre>
   * An optional set of ViewDescriptor names. Only Views using these
   * descriptors will be sent back in the response. If no names are provided,
   * then all Views present in the client system will be included in every
   * response. If measurement_names is also provided, then Views matching the
   * intersection of the two are returned.
   * TODO(aveitch): Consider making this a list of regexes or prefix matches in
   * the future.
   * </pre>
   *
   * <code>repeated string view_names = 1;</code>
   */
  public int getViewNamesCount() {
    return viewNames_.size();
  }
  /**
   * <pre>
   * An optional set of ViewDescriptor names. Only Views using these
   * descriptors will be sent back in the response. If no names are provided,
   * then all Views present in the client system will be included in every
   * response. If measurement_names is also provided, then Views matching the
   * intersection of the two are returned.
   * TODO(aveitch): Consider making this a list of regexes or prefix matches in
   * the future.
   * </pre>
   *
   * <code>repeated string view_names = 1;</code>
   */
  public java.lang.String getViewNames(int index) {
    return viewNames_.get(index);
  }
  /**
   * <pre>
   * An optional set of ViewDescriptor names. Only Views using these
   * descriptors will be sent back in the response. If no names are provided,
   * then all Views present in the client system will be included in every
   * response. If measurement_names is also provided, then Views matching the
   * intersection of the two are returned.
   * TODO(aveitch): Consider making this a list of regexes or prefix matches in
   * the future.
   * </pre>
   *
   * <code>repeated string view_names = 1;</code>
   */
  public com.google.protobuf.ByteString
      getViewNamesBytes(int index) {
    return viewNames_.getByteString(index);
  }

  public static final int MEASUREMENT_NAMES_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList measurementNames_;
  /**
   * <pre>
   * An optional set of MeasurementDescriptor names. Only Views using these
   * descriptors will be sent back in the response. If no names are provided,
   * then all Views present in the client system will be included in every
   * response. If view_names is also provided, then Views matching the
   * intersection of the two are returned.
   * TODO(aveitch): Consider making this a list of regexes or prefix matches in
   * the future.
   * </pre>
   *
   * <code>repeated string measurement_names = 2;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getMeasurementNamesList() {
    return measurementNames_;
  }
  /**
   * <pre>
   * An optional set of MeasurementDescriptor names. Only Views using these
   * descriptors will be sent back in the response. If no names are provided,
   * then all Views present in the client system will be included in every
   * response. If view_names is also provided, then Views matching the
   * intersection of the two are returned.
   * TODO(aveitch): Consider making this a list of regexes or prefix matches in
   * the future.
   * </pre>
   *
   * <code>repeated string measurement_names = 2;</code>
   */
  public int getMeasurementNamesCount() {
    return measurementNames_.size();
  }
  /**
   * <pre>
   * An optional set of MeasurementDescriptor names. Only Views using these
   * descriptors will be sent back in the response. If no names are provided,
   * then all Views present in the client system will be included in every
   * response. If view_names is also provided, then Views matching the
   * intersection of the two are returned.
   * TODO(aveitch): Consider making this a list of regexes or prefix matches in
   * the future.
   * </pre>
   *
   * <code>repeated string measurement_names = 2;</code>
   */
  public java.lang.String getMeasurementNames(int index) {
    return measurementNames_.get(index);
  }
  /**
   * <pre>
   * An optional set of MeasurementDescriptor names. Only Views using these
   * descriptors will be sent back in the response. If no names are provided,
   * then all Views present in the client system will be included in every
   * response. If view_names is also provided, then Views matching the
   * intersection of the two are returned.
   * TODO(aveitch): Consider making this a list of regexes or prefix matches in
   * the future.
   * </pre>
   *
   * <code>repeated string measurement_names = 2;</code>
   */
  public com.google.protobuf.ByteString
      getMeasurementNamesBytes(int index) {
    return measurementNames_.getByteString(index);
  }

  public static final int DONT_INCLUDE_DESCRIPTORS_IN_FIRST_RESPONSE_FIELD_NUMBER = 3;
  private boolean dontIncludeDescriptorsInFirstResponse_;
  /**
   * <pre>
   * By default, the MeasurementDescriptors and ViewDescriptors corresponding to
   * the Views that are returned in a StatsResponse will be included in the
   * first such response. Set this to true to have them not sent.
   * </pre>
   *
   * <code>bool dont_include_descriptors_in_first_response = 3;</code>
   */
  public boolean getDontIncludeDescriptorsInFirstResponse() {
    return dontIncludeDescriptorsInFirstResponse_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < viewNames_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, viewNames_.getRaw(i));
    }
    for (int i = 0; i < measurementNames_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, measurementNames_.getRaw(i));
    }
    if (dontIncludeDescriptorsInFirstResponse_ != false) {
      output.writeBool(3, dontIncludeDescriptorsInFirstResponse_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < viewNames_.size(); i++) {
        dataSize += computeStringSizeNoTag(viewNames_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getViewNamesList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < measurementNames_.size(); i++) {
        dataSize += computeStringSizeNoTag(measurementNames_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getMeasurementNamesList().size();
    }
    if (dontIncludeDescriptorsInFirstResponse_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, dontIncludeDescriptorsInFirstResponse_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.grpc.instrumentation.v1alpha.StatsRequest)) {
      return super.equals(obj);
    }
    io.grpc.instrumentation.v1alpha.StatsRequest other = (io.grpc.instrumentation.v1alpha.StatsRequest) obj;

    boolean result = true;
    result = result && getViewNamesList()
        .equals(other.getViewNamesList());
    result = result && getMeasurementNamesList()
        .equals(other.getMeasurementNamesList());
    result = result && (getDontIncludeDescriptorsInFirstResponse()
        == other.getDontIncludeDescriptorsInFirstResponse());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getViewNamesCount() > 0) {
      hash = (37 * hash) + VIEW_NAMES_FIELD_NUMBER;
      hash = (53 * hash) + getViewNamesList().hashCode();
    }
    if (getMeasurementNamesCount() > 0) {
      hash = (37 * hash) + MEASUREMENT_NAMES_FIELD_NUMBER;
      hash = (53 * hash) + getMeasurementNamesList().hashCode();
    }
    hash = (37 * hash) + DONT_INCLUDE_DESCRIPTORS_IN_FIRST_RESPONSE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDontIncludeDescriptorsInFirstResponse());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.grpc.instrumentation.v1alpha.StatsRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.grpc.instrumentation.v1alpha.StatsRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.grpc.instrumentation.v1alpha.StatsRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.grpc.instrumentation.v1alpha.StatsRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.grpc.instrumentation.v1alpha.StatsRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.grpc.instrumentation.v1alpha.StatsRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.grpc.instrumentation.v1alpha.StatsRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.grpc.instrumentation.v1alpha.StatsRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.grpc.instrumentation.v1alpha.StatsRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.grpc.instrumentation.v1alpha.StatsRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.grpc.instrumentation.v1alpha.StatsRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.grpc.instrumentation.v1alpha.StatsRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.grpc.instrumentation.v1alpha.StatsRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * This message is sent when requesting a set of stats (Census Views) from
   * a client system, as part of the MonitoringService API's.
   * </pre>
   *
   * Protobuf type {@code grpc.instrumentation.v1alpha.StatsRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:grpc.instrumentation.v1alpha.StatsRequest)
      io.grpc.instrumentation.v1alpha.StatsRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.grpc.instrumentation.v1alpha.MonitoringProto.internal_static_grpc_instrumentation_v1alpha_StatsRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.grpc.instrumentation.v1alpha.MonitoringProto.internal_static_grpc_instrumentation_v1alpha_StatsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.grpc.instrumentation.v1alpha.StatsRequest.class, io.grpc.instrumentation.v1alpha.StatsRequest.Builder.class);
    }

    // Construct using io.grpc.instrumentation.v1alpha.StatsRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      viewNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      measurementNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      dontIncludeDescriptorsInFirstResponse_ = false;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.grpc.instrumentation.v1alpha.MonitoringProto.internal_static_grpc_instrumentation_v1alpha_StatsRequest_descriptor;
    }

    public io.grpc.instrumentation.v1alpha.StatsRequest getDefaultInstanceForType() {
      return io.grpc.instrumentation.v1alpha.StatsRequest.getDefaultInstance();
    }

    public io.grpc.instrumentation.v1alpha.StatsRequest build() {
      io.grpc.instrumentation.v1alpha.StatsRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public io.grpc.instrumentation.v1alpha.StatsRequest buildPartial() {
      io.grpc.instrumentation.v1alpha.StatsRequest result = new io.grpc.instrumentation.v1alpha.StatsRequest(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        viewNames_ = viewNames_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.viewNames_ = viewNames_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        measurementNames_ = measurementNames_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.measurementNames_ = measurementNames_;
      result.dontIncludeDescriptorsInFirstResponse_ = dontIncludeDescriptorsInFirstResponse_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.grpc.instrumentation.v1alpha.StatsRequest) {
        return mergeFrom((io.grpc.instrumentation.v1alpha.StatsRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.grpc.instrumentation.v1alpha.StatsRequest other) {
      if (other == io.grpc.instrumentation.v1alpha.StatsRequest.getDefaultInstance()) return this;
      if (!other.viewNames_.isEmpty()) {
        if (viewNames_.isEmpty()) {
          viewNames_ = other.viewNames_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureViewNamesIsMutable();
          viewNames_.addAll(other.viewNames_);
        }
        onChanged();
      }
      if (!other.measurementNames_.isEmpty()) {
        if (measurementNames_.isEmpty()) {
          measurementNames_ = other.measurementNames_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureMeasurementNamesIsMutable();
          measurementNames_.addAll(other.measurementNames_);
        }
        onChanged();
      }
      if (other.getDontIncludeDescriptorsInFirstResponse() != false) {
        setDontIncludeDescriptorsInFirstResponse(other.getDontIncludeDescriptorsInFirstResponse());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.grpc.instrumentation.v1alpha.StatsRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.grpc.instrumentation.v1alpha.StatsRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.LazyStringList viewNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureViewNamesIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        viewNames_ = new com.google.protobuf.LazyStringArrayList(viewNames_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * An optional set of ViewDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If measurement_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string view_names = 1;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getViewNamesList() {
      return viewNames_.getUnmodifiableView();
    }
    /**
     * <pre>
     * An optional set of ViewDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If measurement_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string view_names = 1;</code>
     */
    public int getViewNamesCount() {
      return viewNames_.size();
    }
    /**
     * <pre>
     * An optional set of ViewDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If measurement_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string view_names = 1;</code>
     */
    public java.lang.String getViewNames(int index) {
      return viewNames_.get(index);
    }
    /**
     * <pre>
     * An optional set of ViewDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If measurement_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string view_names = 1;</code>
     */
    public com.google.protobuf.ByteString
        getViewNamesBytes(int index) {
      return viewNames_.getByteString(index);
    }
    /**
     * <pre>
     * An optional set of ViewDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If measurement_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string view_names = 1;</code>
     */
    public Builder setViewNames(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureViewNamesIsMutable();
      viewNames_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of ViewDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If measurement_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string view_names = 1;</code>
     */
    public Builder addViewNames(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureViewNamesIsMutable();
      viewNames_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of ViewDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If measurement_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string view_names = 1;</code>
     */
    public Builder addAllViewNames(
        java.lang.Iterable<java.lang.String> values) {
      ensureViewNamesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, viewNames_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of ViewDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If measurement_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string view_names = 1;</code>
     */
    public Builder clearViewNames() {
      viewNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of ViewDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If measurement_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string view_names = 1;</code>
     */
    public Builder addViewNamesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureViewNamesIsMutable();
      viewNames_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList measurementNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureMeasurementNamesIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        measurementNames_ = new com.google.protobuf.LazyStringArrayList(measurementNames_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * An optional set of MeasurementDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If view_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string measurement_names = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getMeasurementNamesList() {
      return measurementNames_.getUnmodifiableView();
    }
    /**
     * <pre>
     * An optional set of MeasurementDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If view_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string measurement_names = 2;</code>
     */
    public int getMeasurementNamesCount() {
      return measurementNames_.size();
    }
    /**
     * <pre>
     * An optional set of MeasurementDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If view_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string measurement_names = 2;</code>
     */
    public java.lang.String getMeasurementNames(int index) {
      return measurementNames_.get(index);
    }
    /**
     * <pre>
     * An optional set of MeasurementDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If view_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string measurement_names = 2;</code>
     */
    public com.google.protobuf.ByteString
        getMeasurementNamesBytes(int index) {
      return measurementNames_.getByteString(index);
    }
    /**
     * <pre>
     * An optional set of MeasurementDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If view_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string measurement_names = 2;</code>
     */
    public Builder setMeasurementNames(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureMeasurementNamesIsMutable();
      measurementNames_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of MeasurementDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If view_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string measurement_names = 2;</code>
     */
    public Builder addMeasurementNames(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureMeasurementNamesIsMutable();
      measurementNames_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of MeasurementDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If view_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string measurement_names = 2;</code>
     */
    public Builder addAllMeasurementNames(
        java.lang.Iterable<java.lang.String> values) {
      ensureMeasurementNamesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, measurementNames_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of MeasurementDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If view_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string measurement_names = 2;</code>
     */
    public Builder clearMeasurementNames() {
      measurementNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of MeasurementDescriptor names. Only Views using these
     * descriptors will be sent back in the response. If no names are provided,
     * then all Views present in the client system will be included in every
     * response. If view_names is also provided, then Views matching the
     * intersection of the two are returned.
     * TODO(aveitch): Consider making this a list of regexes or prefix matches in
     * the future.
     * </pre>
     *
     * <code>repeated string measurement_names = 2;</code>
     */
    public Builder addMeasurementNamesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureMeasurementNamesIsMutable();
      measurementNames_.add(value);
      onChanged();
      return this;
    }

    private boolean dontIncludeDescriptorsInFirstResponse_ ;
    /**
     * <pre>
     * By default, the MeasurementDescriptors and ViewDescriptors corresponding to
     * the Views that are returned in a StatsResponse will be included in the
     * first such response. Set this to true to have them not sent.
     * </pre>
     *
     * <code>bool dont_include_descriptors_in_first_response = 3;</code>
     */
    public boolean getDontIncludeDescriptorsInFirstResponse() {
      return dontIncludeDescriptorsInFirstResponse_;
    }
    /**
     * <pre>
     * By default, the MeasurementDescriptors and ViewDescriptors corresponding to
     * the Views that are returned in a StatsResponse will be included in the
     * first such response. Set this to true to have them not sent.
     * </pre>
     *
     * <code>bool dont_include_descriptors_in_first_response = 3;</code>
     */
    public Builder setDontIncludeDescriptorsInFirstResponse(boolean value) {
      
      dontIncludeDescriptorsInFirstResponse_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * By default, the MeasurementDescriptors and ViewDescriptors corresponding to
     * the Views that are returned in a StatsResponse will be included in the
     * first such response. Set this to true to have them not sent.
     * </pre>
     *
     * <code>bool dont_include_descriptors_in_first_response = 3;</code>
     */
    public Builder clearDontIncludeDescriptorsInFirstResponse() {
      
      dontIncludeDescriptorsInFirstResponse_ = false;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:grpc.instrumentation.v1alpha.StatsRequest)
  }

  // @@protoc_insertion_point(class_scope:grpc.instrumentation.v1alpha.StatsRequest)
  private static final io.grpc.instrumentation.v1alpha.StatsRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.grpc.instrumentation.v1alpha.StatsRequest();
  }

  public static io.grpc.instrumentation.v1alpha.StatsRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StatsRequest>
      PARSER = new com.google.protobuf.AbstractParser<StatsRequest>() {
    public StatsRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new StatsRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<StatsRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StatsRequest> getParserForType() {
    return PARSER;
  }

  public io.grpc.instrumentation.v1alpha.StatsRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

