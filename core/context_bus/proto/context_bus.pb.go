// Code generated by protoc-gen-go. DO NOT EDIT.
// source: context_bus.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	context_bus.proto

It has these top-level messages:
	Condition
	Prerequisite
	PrerequisiteTree
	FaultDelayParam
	TrafficBalanceParam
	TrafficRoutingParam
	Reaction
	Path
	AttributeConfiguration
	TimestampConfiguration
	StackTraceConfiguration
	LoggingConfigure
	TracingConfigure
	MetricsConfigure
	Observation
	Configure
	CPUProfile
	MemProfile
	NetProfile
	HardwareProfile
	LanguageGo
	LanguageJava
	LanguageProfile
	EnvironmentalProfile
	EventWhen
	AttributeValue
	Attributes
	EventWhere
	EventRecorder
	EventMessage
	LibrariesMessage
	EventWhat
	EventRepresentation
	ParentChildPointers
	EventMetadata
	EventData
	Record
	LineageSnapshot
	Payload
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ConditionOperator int32

const (
	ConditionOperator_ConditionOperator_ ConditionOperator = 0
	ConditionOperator_LT                 ConditionOperator = 1
	ConditionOperator_GT                 ConditionOperator = 2
	ConditionOperator_LE                 ConditionOperator = 3
	ConditionOperator_GE                 ConditionOperator = 4
	ConditionOperator_EQ                 ConditionOperator = 5
	ConditionOperator_NE                 ConditionOperator = 6
)

var ConditionOperator_name = map[int32]string{
	0: "ConditionOperator_",
	1: "LT",
	2: "GT",
	3: "LE",
	4: "GE",
	5: "EQ",
	6: "NE",
}
var ConditionOperator_value = map[string]int32{
	"ConditionOperator_": 0,
	"LT":                 1,
	"GT":                 2,
	"LE":                 3,
	"GE":                 4,
	"EQ":                 5,
	"NE":                 6,
}

func (x ConditionOperator) String() string {
	return proto1.EnumName(ConditionOperator_name, int32(x))
}
func (ConditionOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ConditionType int32

const (
	ConditionType_ConditionType_ ConditionType = 0
	ConditionType_NumOfInvok     ConditionType = 1
	ConditionType_Latency        ConditionType = 2
)

var ConditionType_name = map[int32]string{
	0: "ConditionType_",
	1: "NumOfInvok",
	2: "Latency",
}
var ConditionType_value = map[string]int32{
	"ConditionType_": 0,
	"NumOfInvok":     1,
	"Latency":        2,
}

func (x ConditionType) String() string {
	return proto1.EnumName(ConditionType_name, int32(x))
}
func (ConditionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ReactionType int32

const (
	ReactionType_ReactionType_ ReactionType = 0
	// fault injection
	ReactionType_FaultCrash ReactionType = 1
	ReactionType_FaultDelay ReactionType = 2
	ReactionType_FaultDrop  ReactionType = 3
	// traffic (e.g., load-balancing, traffic shaping)
	ReactionType_TrafficBalance ReactionType = 101
	ReactionType_TrafficRouting ReactionType = 102
)

var ReactionType_name = map[int32]string{
	0:   "ReactionType_",
	1:   "FaultCrash",
	2:   "FaultDelay",
	3:   "FaultDrop",
	101: "TrafficBalance",
	102: "TrafficRouting",
}
var ReactionType_value = map[string]int32{
	"ReactionType_":  0,
	"FaultCrash":     1,
	"FaultDelay":     2,
	"FaultDrop":      3,
	"TrafficBalance": 101,
	"TrafficRouting": 102,
}

func (x ReactionType) String() string {
	return proto1.EnumName(ReactionType_name, int32(x))
}
func (ReactionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PathType int32

const (
	PathType_PathType_   PathType = 0
	PathType_Application PathType = 1
	PathType_Library     PathType = 2
)

var PathType_name = map[int32]string{
	0: "PathType_",
	1: "Application",
	2: "Library",
}
var PathType_value = map[string]int32{
	"PathType_":   0,
	"Application": 1,
	"Library":     2,
}

func (x PathType) String() string {
	return proto1.EnumName(PathType_name, int32(x))
}
func (PathType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MetricType int32

const (
	MetricType_MetricType_ MetricType = 0
	MetricType_Counter     MetricType = 1
	MetricType_Gauge       MetricType = 2
	MetricType_Histogram   MetricType = 3
	MetricType_Summery     MetricType = 4
)

var MetricType_name = map[int32]string{
	0: "MetricType_",
	1: "Counter",
	2: "Gauge",
	3: "Histogram",
	4: "Summery",
}
var MetricType_value = map[string]int32{
	"MetricType_": 0,
	"Counter":     1,
	"Gauge":       2,
	"Histogram":   3,
	"Summery":     4,
}

func (x MetricType) String() string {
	return proto1.EnumName(MetricType_name, int32(x))
}
func (MetricType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type LanguageType int32

const (
	LanguageType_LanguageType_ LanguageType = 0
	LanguageType_Other         LanguageType = 1
	LanguageType_Golang        LanguageType = 2
	LanguageType_Java          LanguageType = 3
)

var LanguageType_name = map[int32]string{
	0: "LanguageType_",
	1: "Other",
	2: "Golang",
	3: "Java",
}
var LanguageType_value = map[string]int32{
	"LanguageType_": 0,
	"Other":         1,
	"Golang":        2,
	"Java":          3,
}

func (x LanguageType) String() string {
	return proto1.EnumName(LanguageType_name, int32(x))
}
func (LanguageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type AttributeValueType int32

const (
	AttributeValueType_AttributeValueType_ AttributeValueType = 0
	AttributeValueType_AttributeValueStr   AttributeValueType = 1
	AttributeValueType_AttributeValueAttr  AttributeValueType = 2
)

var AttributeValueType_name = map[int32]string{
	0: "AttributeValueType_",
	1: "AttributeValueStr",
	2: "AttributeValueAttr",
}
var AttributeValueType_value = map[string]int32{
	"AttributeValueType_": 0,
	"AttributeValueStr":   1,
	"AttributeValueAttr":  2,
}

func (x AttributeValueType) String() string {
	return proto1.EnumName(AttributeValueType_name, int32(x))
}
func (AttributeValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type EventRecorderType int32

const (
	EventRecorderType_EventRecorderType_          EventRecorderType = 0
	EventRecorderType_EventRecorderServiceHandler EventRecorderType = 1
	EventRecorderType_EventRecorderFunction       EventRecorderType = 2
	EventRecorderType_EventRecorderThirdParty     EventRecorderType = 3
)

var EventRecorderType_name = map[int32]string{
	0: "EventRecorderType_",
	1: "EventRecorderServiceHandler",
	2: "EventRecorderFunction",
	3: "EventRecorderThirdParty",
}
var EventRecorderType_value = map[string]int32{
	"EventRecorderType_":          0,
	"EventRecorderServiceHandler": 1,
	"EventRecorderFunction":       2,
	"EventRecorderThirdParty":     3,
}

func (x EventRecorderType) String() string {
	return proto1.EnumName(EventRecorderType_name, int32(x))
}
func (EventRecorderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// ******************* from 3mb WIP
type MessageType int32

const (
	MessageType_MessageType_     MessageType = 0
	MessageType_Message_Request  MessageType = 1
	MessageType_Message_Response MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "MessageType_",
	1: "Message_Request",
	2: "Message_Response",
}
var MessageType_value = map[string]int32{
	"MessageType_":     0,
	"Message_Request":  1,
	"Message_Response": 2,
}

func (x MessageType) String() string {
	return proto1.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type RecordType int32

const (
	RecordType_RecordType_   RecordType = 0
	RecordType_RecordSend    RecordType = 1
	RecordType_RecordReceive RecordType = 2
)

var RecordType_name = map[int32]string{
	0: "RecordType_",
	1: "RecordSend",
	2: "RecordReceive",
}
var RecordType_value = map[string]int32{
	"RecordType_":   0,
	"RecordSend":    1,
	"RecordReceive": 2,
}

func (x RecordType) String() string {
	return proto1.EnumName(RecordType_name, int32(x))
}
func (RecordType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Condition struct {
	Type  ConditionType     `protobuf:"varint,1,opt,name=type,enum=context_bus.ConditionType" json:"type,omitempty"`
	Op    ConditionOperator `protobuf:"varint,2,opt,name=op,enum=context_bus.ConditionOperator" json:"op,omitempty"`
	Value int64             `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (m *Condition) Reset()                    { *m = Condition{} }
func (m *Condition) String() string            { return proto1.CompactTextString(m) }
func (*Condition) ProtoMessage()               {}
func (*Condition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Condition) GetType() ConditionType {
	if m != nil {
		return m.Type
	}
	return ConditionType_ConditionType_
}

func (m *Condition) GetOp() ConditionOperator {
	if m != nil {
		return m.Op
	}
	return ConditionOperator_ConditionOperator_
}

func (m *Condition) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Prerequisite struct {
	MessageName string       `protobuf:"bytes,1,opt,name=message_name,json=messageName" json:"message_name,omitempty"`
	Conds       []*Condition `protobuf:"bytes,2,rep,name=conds" json:"conds,omitempty"`
	// tree pointers
	Parent   int64   `protobuf:"varint,100,opt,name=parent" json:"parent,omitempty"`
	Children []int64 `protobuf:"varint,101,rep,packed,name=children" json:"children,omitempty"`
}

func (m *Prerequisite) Reset()                    { *m = Prerequisite{} }
func (m *Prerequisite) String() string            { return proto1.CompactTextString(m) }
func (*Prerequisite) ProtoMessage()               {}
func (*Prerequisite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Prerequisite) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

func (m *Prerequisite) GetConds() []*Condition {
	if m != nil {
		return m.Conds
	}
	return nil
}

func (m *Prerequisite) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *Prerequisite) GetChildren() []int64 {
	if m != nil {
		return m.Children
	}
	return nil
}

// prerequisite tree
type PrerequisiteTree struct {
	Pres   []*Prerequisite `protobuf:"bytes,1,rep,name=pres" json:"pres,omitempty"`
	Leaves []*Prerequisite `protobuf:"bytes,2,rep,name=leaves" json:"leaves,omitempty"`
}

func (m *PrerequisiteTree) Reset()                    { *m = PrerequisiteTree{} }
func (m *PrerequisiteTree) String() string            { return proto1.CompactTextString(m) }
func (*PrerequisiteTree) ProtoMessage()               {}
func (*PrerequisiteTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PrerequisiteTree) GetPres() []*Prerequisite {
	if m != nil {
		return m.Pres
	}
	return nil
}

func (m *PrerequisiteTree) GetLeaves() []*Prerequisite {
	if m != nil {
		return m.Leaves
	}
	return nil
}

type FaultDelayParam struct {
	Ms int64 `protobuf:"varint,1,opt,name=ms" json:"ms,omitempty"`
}

func (m *FaultDelayParam) Reset()                    { *m = FaultDelayParam{} }
func (m *FaultDelayParam) String() string            { return proto1.CompactTextString(m) }
func (*FaultDelayParam) ProtoMessage()               {}
func (*FaultDelayParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FaultDelayParam) GetMs() int64 {
	if m != nil {
		return m.Ms
	}
	return 0
}

type TrafficBalanceParam struct {
}

func (m *TrafficBalanceParam) Reset()                    { *m = TrafficBalanceParam{} }
func (m *TrafficBalanceParam) String() string            { return proto1.CompactTextString(m) }
func (*TrafficBalanceParam) ProtoMessage()               {}
func (*TrafficBalanceParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type TrafficRoutingParam struct {
}

func (m *TrafficRoutingParam) Reset()                    { *m = TrafficRoutingParam{} }
func (m *TrafficRoutingParam) String() string            { return proto1.CompactTextString(m) }
func (*TrafficRoutingParam) ProtoMessage()               {}
func (*TrafficRoutingParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Reaction struct {
	Type ReactionType `protobuf:"varint,1,opt,name=type,enum=context_bus.ReactionType" json:"type,omitempty"`
	// Types that are valid to be assigned to Params:
	//	*Reaction_FaultDelay
	//	*Reaction_TrafficBalance
	//	*Reaction_TrafficRouting
	Params  isReaction_Params   `protobuf_oneof:"params"`
	PreTree []*PrerequisiteTree `protobuf:"bytes,3,rep,name=pre_tree,json=preTree" json:"pre_tree,omitempty"`
}

func (m *Reaction) Reset()                    { *m = Reaction{} }
func (m *Reaction) String() string            { return proto1.CompactTextString(m) }
func (*Reaction) ProtoMessage()               {}
func (*Reaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isReaction_Params interface{ isReaction_Params() }

type Reaction_FaultDelay struct {
	FaultDelay *FaultDelayParam `protobuf:"bytes,2002,opt,name=FaultDelay,oneof"`
}
type Reaction_TrafficBalance struct {
	TrafficBalance *TrafficBalanceParam `protobuf:"bytes,2101,opt,name=TrafficBalance,oneof"`
}
type Reaction_TrafficRouting struct {
	TrafficRouting *TrafficRoutingParam `protobuf:"bytes,2102,opt,name=TrafficRouting,oneof"`
}

func (*Reaction_FaultDelay) isReaction_Params()     {}
func (*Reaction_TrafficBalance) isReaction_Params() {}
func (*Reaction_TrafficRouting) isReaction_Params() {}

func (m *Reaction) GetParams() isReaction_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Reaction) GetType() ReactionType {
	if m != nil {
		return m.Type
	}
	return ReactionType_ReactionType_
}

func (m *Reaction) GetFaultDelay() *FaultDelayParam {
	if x, ok := m.GetParams().(*Reaction_FaultDelay); ok {
		return x.FaultDelay
	}
	return nil
}

func (m *Reaction) GetTrafficBalance() *TrafficBalanceParam {
	if x, ok := m.GetParams().(*Reaction_TrafficBalance); ok {
		return x.TrafficBalance
	}
	return nil
}

func (m *Reaction) GetTrafficRouting() *TrafficRoutingParam {
	if x, ok := m.GetParams().(*Reaction_TrafficRouting); ok {
		return x.TrafficRouting
	}
	return nil
}

func (m *Reaction) GetPreTree() []*PrerequisiteTree {
	if m != nil {
		return m.PreTree
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Reaction) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Reaction_OneofMarshaler, _Reaction_OneofUnmarshaler, _Reaction_OneofSizer, []interface{}{
		(*Reaction_FaultDelay)(nil),
		(*Reaction_TrafficBalance)(nil),
		(*Reaction_TrafficRouting)(nil),
	}
}

func _Reaction_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Reaction)
	// params
	switch x := m.Params.(type) {
	case *Reaction_FaultDelay:
		b.EncodeVarint(2002<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.FaultDelay); err != nil {
			return err
		}
	case *Reaction_TrafficBalance:
		b.EncodeVarint(2101<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.TrafficBalance); err != nil {
			return err
		}
	case *Reaction_TrafficRouting:
		b.EncodeVarint(2102<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.TrafficRouting); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Reaction.Params has unexpected type %T", x)
	}
	return nil
}

func _Reaction_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Reaction)
	switch tag {
	case 2002: // params.FaultDelay
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(FaultDelayParam)
		err := b.DecodeMessage(msg)
		m.Params = &Reaction_FaultDelay{msg}
		return true, err
	case 2101: // params.TrafficBalance
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(TrafficBalanceParam)
		err := b.DecodeMessage(msg)
		m.Params = &Reaction_TrafficBalance{msg}
		return true, err
	case 2102: // params.TrafficRouting
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(TrafficRoutingParam)
		err := b.DecodeMessage(msg)
		m.Params = &Reaction_TrafficRouting{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Reaction_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Reaction)
	// params
	switch x := m.Params.(type) {
	case *Reaction_FaultDelay:
		s := proto1.Size(x.FaultDelay)
		n += proto1.SizeVarint(2002<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Reaction_TrafficBalance:
		s := proto1.Size(x.TrafficBalance)
		n += proto1.SizeVarint(2101<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Reaction_TrafficRouting:
		s := proto1.Size(x.TrafficRouting)
		n += proto1.SizeVarint(2102<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Path struct {
	Type PathType `protobuf:"varint,1,opt,name=type,enum=context_bus.PathType" json:"type,omitempty"`
	Path []string `protobuf:"bytes,2,rep,name=path" json:"path,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto1.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Path) GetType() PathType {
	if m != nil {
		return m.Type
	}
	return PathType_PathType_
}

func (m *Path) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

type AttributeConfiguration struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path *Path  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *AttributeConfiguration) Reset()                    { *m = AttributeConfiguration{} }
func (m *AttributeConfiguration) String() string            { return proto1.CompactTextString(m) }
func (*AttributeConfiguration) ProtoMessage()               {}
func (*AttributeConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AttributeConfiguration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AttributeConfiguration) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

type TimestampConfiguration struct {
	Format string `protobuf:"bytes,1,opt,name=format" json:"format,omitempty"`
}

func (m *TimestampConfiguration) Reset()                    { *m = TimestampConfiguration{} }
func (m *TimestampConfiguration) String() string            { return proto1.CompactTextString(m) }
func (*TimestampConfiguration) ProtoMessage()               {}
func (*TimestampConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TimestampConfiguration) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type StackTraceConfiguration struct {
}

func (m *StackTraceConfiguration) Reset()                    { *m = StackTraceConfiguration{} }
func (m *StackTraceConfiguration) String() string            { return proto1.CompactTextString(m) }
func (*StackTraceConfiguration) ProtoMessage()               {}
func (*StackTraceConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type LoggingConfigure struct {
	Timestamp  *TimestampConfiguration   `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Stacktrace *StackTraceConfiguration  `protobuf:"bytes,2,opt,name=stacktrace" json:"stacktrace,omitempty"`
	Attrs      []*AttributeConfiguration `protobuf:"bytes,3,rep,name=attrs" json:"attrs,omitempty"`
}

func (m *LoggingConfigure) Reset()                    { *m = LoggingConfigure{} }
func (m *LoggingConfigure) String() string            { return proto1.CompactTextString(m) }
func (*LoggingConfigure) ProtoMessage()               {}
func (*LoggingConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *LoggingConfigure) GetTimestamp() *TimestampConfiguration {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LoggingConfigure) GetStacktrace() *StackTraceConfiguration {
	if m != nil {
		return m.Stacktrace
	}
	return nil
}

func (m *LoggingConfigure) GetAttrs() []*AttributeConfiguration {
	if m != nil {
		return m.Attrs
	}
	return nil
}

type TracingConfigure struct {
	Attrs []*AttributeConfiguration `protobuf:"bytes,1,rep,name=attrs" json:"attrs,omitempty"`
}

func (m *TracingConfigure) Reset()                    { *m = TracingConfigure{} }
func (m *TracingConfigure) String() string            { return proto1.CompactTextString(m) }
func (*TracingConfigure) ProtoMessage()               {}
func (*TracingConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TracingConfigure) GetAttrs() []*AttributeConfiguration {
	if m != nil {
		return m.Attrs
	}
	return nil
}

type MetricsConfigure struct {
	Type MetricType `protobuf:"varint,1,opt,name=type,enum=context_bus.MetricType" json:"type,omitempty"`
	Name string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Tags []*Path    `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *MetricsConfigure) Reset()                    { *m = MetricsConfigure{} }
func (m *MetricsConfigure) String() string            { return proto1.CompactTextString(m) }
func (*MetricsConfigure) ProtoMessage()               {}
func (*MetricsConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MetricsConfigure) GetType() MetricType {
	if m != nil {
		return m.Type
	}
	return MetricType_MetricType_
}

func (m *MetricsConfigure) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricsConfigure) GetTags() []*Path {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Observation struct {
	Logging *LoggingConfigure   `protobuf:"bytes,1,opt,name=logging" json:"logging,omitempty"`
	Tracing *TracingConfigure   `protobuf:"bytes,2,opt,name=tracing" json:"tracing,omitempty"`
	Metrics []*MetricsConfigure `protobuf:"bytes,3,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *Observation) Reset()                    { *m = Observation{} }
func (m *Observation) String() string            { return proto1.CompactTextString(m) }
func (*Observation) ProtoMessage()               {}
func (*Observation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Observation) GetLogging() *LoggingConfigure {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *Observation) GetTracing() *TracingConfigure {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *Observation) GetMetrics() []*MetricsConfigure {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Configure struct {
	Reactions    map[string]*Reaction    `protobuf:"bytes,1,rep,name=reactions" json:"reactions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Observations map[string]*Observation `protobuf:"bytes,2,rep,name=observations" json:"observations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Configure) Reset()                    { *m = Configure{} }
func (m *Configure) String() string            { return proto1.CompactTextString(m) }
func (*Configure) ProtoMessage()               {}
func (*Configure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Configure) GetReactions() map[string]*Reaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

func (m *Configure) GetObservations() map[string]*Observation {
	if m != nil {
		return m.Observations
	}
	return nil
}

// ******************* Environmental Profile *******************
type CPUProfile struct {
	Percent float64 `protobuf:"fixed64,1,opt,name=percent" json:"percent,omitempty"`
}

func (m *CPUProfile) Reset()                    { *m = CPUProfile{} }
func (m *CPUProfile) String() string            { return proto1.CompactTextString(m) }
func (*CPUProfile) ProtoMessage()               {}
func (*CPUProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CPUProfile) GetPercent() float64 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type MemProfile struct {
	Total       uint64  `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Available   uint64  `protobuf:"varint,2,opt,name=available" json:"available,omitempty"`
	Used        uint64  `protobuf:"varint,3,opt,name=used" json:"used,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,4,opt,name=usedPercent" json:"usedPercent,omitempty"`
	Free        uint64  `protobuf:"varint,5,opt,name=free" json:"free,omitempty"`
}

func (m *MemProfile) Reset()                    { *m = MemProfile{} }
func (m *MemProfile) String() string            { return proto1.CompactTextString(m) }
func (*MemProfile) ProtoMessage()               {}
func (*MemProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *MemProfile) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *MemProfile) GetAvailable() uint64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *MemProfile) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *MemProfile) GetUsedPercent() float64 {
	if m != nil {
		return m.UsedPercent
	}
	return 0
}

func (m *MemProfile) GetFree() uint64 {
	if m != nil {
		return m.Free
	}
	return 0
}

type NetProfile struct {
	BytesSent   uint64 `protobuf:"varint,1,opt,name=bytesSent" json:"bytesSent,omitempty"`
	BytesRecv   uint64 `protobuf:"varint,2,opt,name=bytesRecv" json:"bytesRecv,omitempty"`
	PacketsSent uint64 `protobuf:"varint,3,opt,name=packetsSent" json:"packetsSent,omitempty"`
	PacketsRecv uint64 `protobuf:"varint,4,opt,name=packetsRecv" json:"packetsRecv,omitempty"`
	Errin       uint64 `protobuf:"varint,5,opt,name=errin" json:"errin,omitempty"`
	Errout      uint64 `protobuf:"varint,6,opt,name=errout" json:"errout,omitempty"`
	Dropin      uint64 `protobuf:"varint,7,opt,name=dropin" json:"dropin,omitempty"`
	Dropout     uint64 `protobuf:"varint,8,opt,name=dropout" json:"dropout,omitempty"`
}

func (m *NetProfile) Reset()                    { *m = NetProfile{} }
func (m *NetProfile) String() string            { return proto1.CompactTextString(m) }
func (*NetProfile) ProtoMessage()               {}
func (*NetProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *NetProfile) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *NetProfile) GetBytesRecv() uint64 {
	if m != nil {
		return m.BytesRecv
	}
	return 0
}

func (m *NetProfile) GetPacketsSent() uint64 {
	if m != nil {
		return m.PacketsSent
	}
	return 0
}

func (m *NetProfile) GetPacketsRecv() uint64 {
	if m != nil {
		return m.PacketsRecv
	}
	return 0
}

func (m *NetProfile) GetErrin() uint64 {
	if m != nil {
		return m.Errin
	}
	return 0
}

func (m *NetProfile) GetErrout() uint64 {
	if m != nil {
		return m.Errout
	}
	return 0
}

func (m *NetProfile) GetDropin() uint64 {
	if m != nil {
		return m.Dropin
	}
	return 0
}

func (m *NetProfile) GetDropout() uint64 {
	if m != nil {
		return m.Dropout
	}
	return 0
}

type HardwareProfile struct {
	Cpu *CPUProfile `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	Mem *MemProfile `protobuf:"bytes,2,opt,name=mem" json:"mem,omitempty"`
	Net *NetProfile `protobuf:"bytes,3,opt,name=net" json:"net,omitempty"`
}

func (m *HardwareProfile) Reset()                    { *m = HardwareProfile{} }
func (m *HardwareProfile) String() string            { return proto1.CompactTextString(m) }
func (*HardwareProfile) ProtoMessage()               {}
func (*HardwareProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *HardwareProfile) GetCpu() *CPUProfile {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *HardwareProfile) GetMem() *MemProfile {
	if m != nil {
		return m.Mem
	}
	return nil
}

func (m *HardwareProfile) GetNet() *NetProfile {
	if m != nil {
		return m.Net
	}
	return nil
}

type LanguageGo struct {
	HeapSys       uint64  `protobuf:"varint,1,opt,name=HeapSys" json:"HeapSys,omitempty"`
	HeapAlloc     uint64  `protobuf:"varint,2,opt,name=HeapAlloc" json:"HeapAlloc,omitempty"`
	HeapInuse     uint64  `protobuf:"varint,3,opt,name=HeapInuse" json:"HeapInuse,omitempty"`
	StackSys      uint64  `protobuf:"varint,4,opt,name=StackSys" json:"StackSys,omitempty"`
	StackInuse    uint64  `protobuf:"varint,5,opt,name=StackInuse" json:"StackInuse,omitempty"`
	MSpanInuse    uint64  `protobuf:"varint,6,opt,name=MSpanInuse" json:"MSpanInuse,omitempty"`
	MSpanSys      uint64  `protobuf:"varint,7,opt,name=MSpanSys" json:"MSpanSys,omitempty"`
	MCacheInuse   uint64  `protobuf:"varint,8,opt,name=MCacheInuse" json:"MCacheInuse,omitempty"`
	MCacheSys     uint64  `protobuf:"varint,9,opt,name=MCacheSys" json:"MCacheSys,omitempty"`
	LastGC        uint64  `protobuf:"varint,101,opt,name=LastGC" json:"LastGC,omitempty"`
	NextGC        uint64  `protobuf:"varint,102,opt,name=NextGC" json:"NextGC,omitempty"`
	GCCPUFraction float64 `protobuf:"fixed64,103,opt,name=GCCPUFraction" json:"GCCPUFraction,omitempty"`
}

func (m *LanguageGo) Reset()                    { *m = LanguageGo{} }
func (m *LanguageGo) String() string            { return proto1.CompactTextString(m) }
func (*LanguageGo) ProtoMessage()               {}
func (*LanguageGo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *LanguageGo) GetHeapSys() uint64 {
	if m != nil {
		return m.HeapSys
	}
	return 0
}

func (m *LanguageGo) GetHeapAlloc() uint64 {
	if m != nil {
		return m.HeapAlloc
	}
	return 0
}

func (m *LanguageGo) GetHeapInuse() uint64 {
	if m != nil {
		return m.HeapInuse
	}
	return 0
}

func (m *LanguageGo) GetStackSys() uint64 {
	if m != nil {
		return m.StackSys
	}
	return 0
}

func (m *LanguageGo) GetStackInuse() uint64 {
	if m != nil {
		return m.StackInuse
	}
	return 0
}

func (m *LanguageGo) GetMSpanInuse() uint64 {
	if m != nil {
		return m.MSpanInuse
	}
	return 0
}

func (m *LanguageGo) GetMSpanSys() uint64 {
	if m != nil {
		return m.MSpanSys
	}
	return 0
}

func (m *LanguageGo) GetMCacheInuse() uint64 {
	if m != nil {
		return m.MCacheInuse
	}
	return 0
}

func (m *LanguageGo) GetMCacheSys() uint64 {
	if m != nil {
		return m.MCacheSys
	}
	return 0
}

func (m *LanguageGo) GetLastGC() uint64 {
	if m != nil {
		return m.LastGC
	}
	return 0
}

func (m *LanguageGo) GetNextGC() uint64 {
	if m != nil {
		return m.NextGC
	}
	return 0
}

func (m *LanguageGo) GetGCCPUFraction() float64 {
	if m != nil {
		return m.GCCPUFraction
	}
	return 0
}

type LanguageJava struct {
}

func (m *LanguageJava) Reset()                    { *m = LanguageJava{} }
func (m *LanguageJava) String() string            { return proto1.CompactTextString(m) }
func (*LanguageJava) ProtoMessage()               {}
func (*LanguageJava) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type LanguageProfile struct {
	Type LanguageType `protobuf:"varint,1,opt,name=type,enum=context_bus.LanguageType" json:"type,omitempty"`
	// Types that are valid to be assigned to Profile:
	//	*LanguageProfile_Go
	//	*LanguageProfile_Java
	Profile isLanguageProfile_Profile `protobuf_oneof:"Profile"`
}

func (m *LanguageProfile) Reset()                    { *m = LanguageProfile{} }
func (m *LanguageProfile) String() string            { return proto1.CompactTextString(m) }
func (*LanguageProfile) ProtoMessage()               {}
func (*LanguageProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type isLanguageProfile_Profile interface{ isLanguageProfile_Profile() }

type LanguageProfile_Go struct {
	Go *LanguageGo `protobuf:"bytes,2002,opt,name=go,oneof"`
}
type LanguageProfile_Java struct {
	Java *LanguageJava `protobuf:"bytes,2003,opt,name=java,oneof"`
}

func (*LanguageProfile_Go) isLanguageProfile_Profile()   {}
func (*LanguageProfile_Java) isLanguageProfile_Profile() {}

func (m *LanguageProfile) GetProfile() isLanguageProfile_Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *LanguageProfile) GetType() LanguageType {
	if m != nil {
		return m.Type
	}
	return LanguageType_LanguageType_
}

func (m *LanguageProfile) GetGo() *LanguageGo {
	if x, ok := m.GetProfile().(*LanguageProfile_Go); ok {
		return x.Go
	}
	return nil
}

func (m *LanguageProfile) GetJava() *LanguageJava {
	if x, ok := m.GetProfile().(*LanguageProfile_Java); ok {
		return x.Java
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LanguageProfile) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _LanguageProfile_OneofMarshaler, _LanguageProfile_OneofUnmarshaler, _LanguageProfile_OneofSizer, []interface{}{
		(*LanguageProfile_Go)(nil),
		(*LanguageProfile_Java)(nil),
	}
}

func _LanguageProfile_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*LanguageProfile)
	// Profile
	switch x := m.Profile.(type) {
	case *LanguageProfile_Go:
		b.EncodeVarint(2002<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Go); err != nil {
			return err
		}
	case *LanguageProfile_Java:
		b.EncodeVarint(2003<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Java); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LanguageProfile.Profile has unexpected type %T", x)
	}
	return nil
}

func _LanguageProfile_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*LanguageProfile)
	switch tag {
	case 2002: // Profile.go
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LanguageGo)
		err := b.DecodeMessage(msg)
		m.Profile = &LanguageProfile_Go{msg}
		return true, err
	case 2003: // Profile.java
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LanguageJava)
		err := b.DecodeMessage(msg)
		m.Profile = &LanguageProfile_Java{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LanguageProfile_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*LanguageProfile)
	// Profile
	switch x := m.Profile.(type) {
	case *LanguageProfile_Go:
		s := proto1.Size(x.Go)
		n += proto1.SizeVarint(2002<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *LanguageProfile_Java:
		s := proto1.Size(x.Java)
		n += proto1.SizeVarint(2003<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EnvironmentalProfile struct {
	Timestamp int64            `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Hardware  *HardwareProfile `protobuf:"bytes,2,opt,name=hardware" json:"hardware,omitempty"`
	Language  *LanguageProfile `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Prev      int64            `protobuf:"varint,101,opt,name=prev" json:"prev,omitempty"`
	Next      int64            `protobuf:"varint,102,opt,name=next" json:"next,omitempty"`
}

func (m *EnvironmentalProfile) Reset()                    { *m = EnvironmentalProfile{} }
func (m *EnvironmentalProfile) String() string            { return proto1.CompactTextString(m) }
func (*EnvironmentalProfile) ProtoMessage()               {}
func (*EnvironmentalProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *EnvironmentalProfile) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EnvironmentalProfile) GetHardware() *HardwareProfile {
	if m != nil {
		return m.Hardware
	}
	return nil
}

func (m *EnvironmentalProfile) GetLanguage() *LanguageProfile {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *EnvironmentalProfile) GetPrev() int64 {
	if m != nil {
		return m.Prev
	}
	return 0
}

func (m *EnvironmentalProfile) GetNext() int64 {
	if m != nil {
		return m.Next
	}
	return 0
}

// ******************* Event Representation
type EventWhen struct {
	Time int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
}

func (m *EventWhen) Reset()                    { *m = EventWhen{} }
func (m *EventWhen) String() string            { return proto1.CompactTextString(m) }
func (*EventWhen) ProtoMessage()               {}
func (*EventWhen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *EventWhen) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type AttributeValue struct {
	Type   AttributeValueType `protobuf:"varint,1,opt,name=type,enum=context_bus.AttributeValueType" json:"type,omitempty"`
	Str    string             `protobuf:"bytes,2,opt,name=str" json:"str,omitempty"`
	Struct *Attributes        `protobuf:"bytes,3,opt,name=struct" json:"struct,omitempty"`
}

func (m *AttributeValue) Reset()                    { *m = AttributeValue{} }
func (m *AttributeValue) String() string            { return proto1.CompactTextString(m) }
func (*AttributeValue) ProtoMessage()               {}
func (*AttributeValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *AttributeValue) GetType() AttributeValueType {
	if m != nil {
		return m.Type
	}
	return AttributeValueType_AttributeValueType_
}

func (m *AttributeValue) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *AttributeValue) GetStruct() *Attributes {
	if m != nil {
		return m.Struct
	}
	return nil
}

type Attributes struct {
	Attrs map[string]*AttributeValue `protobuf:"bytes,1,rep,name=attrs" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Attributes) Reset()                    { *m = Attributes{} }
func (m *Attributes) String() string            { return proto1.CompactTextString(m) }
func (*Attributes) ProtoMessage()               {}
func (*Attributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Attributes) GetAttrs() map[string]*AttributeValue {
	if m != nil {
		return m.Attrs
	}
	return nil
}

type EventWhere struct {
	Attrs      *Attributes `protobuf:"bytes,1,opt,name=attrs" json:"attrs,omitempty"`
	Stacktrace string      `protobuf:"bytes,2,opt,name=stacktrace" json:"stacktrace,omitempty"`
}

func (m *EventWhere) Reset()                    { *m = EventWhere{} }
func (m *EventWhere) String() string            { return proto1.CompactTextString(m) }
func (*EventWhere) ProtoMessage()               {}
func (*EventWhere) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *EventWhere) GetAttrs() *Attributes {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *EventWhere) GetStacktrace() string {
	if m != nil {
		return m.Stacktrace
	}
	return ""
}

type EventRecorder struct {
	Type EventRecorderType `protobuf:"varint,1,opt,name=type,enum=context_bus.EventRecorderType" json:"type,omitempty"`
	Name string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *EventRecorder) Reset()                    { *m = EventRecorder{} }
func (m *EventRecorder) String() string            { return proto1.CompactTextString(m) }
func (*EventRecorder) ProtoMessage()               {}
func (*EventRecorder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *EventRecorder) GetType() EventRecorderType {
	if m != nil {
		return m.Type
	}
	return EventRecorderType_EventRecorderType_
}

func (m *EventRecorder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EventMessage struct {
	Attrs   *Attributes `protobuf:"bytes,1,opt,name=attrs" json:"attrs,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *EventMessage) Reset()                    { *m = EventMessage{} }
func (m *EventMessage) String() string            { return proto1.CompactTextString(m) }
func (*EventMessage) ProtoMessage()               {}
func (*EventMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *EventMessage) GetAttrs() *Attributes {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *EventMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LibrariesMessage struct {
	Libraries map[string]*EventMessage `protobuf:"bytes,1,rep,name=libraries" json:"libraries,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *LibrariesMessage) Reset()                    { *m = LibrariesMessage{} }
func (m *LibrariesMessage) String() string            { return proto1.CompactTextString(m) }
func (*LibrariesMessage) ProtoMessage()               {}
func (*LibrariesMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *LibrariesMessage) GetLibraries() map[string]*EventMessage {
	if m != nil {
		return m.Libraries
	}
	return nil
}

type EventWhat struct {
	Application *EventMessage     `protobuf:"bytes,1,opt,name=application" json:"application,omitempty"`
	Libraries   *LibrariesMessage `protobuf:"bytes,2,opt,name=libraries" json:"libraries,omitempty"`
}

func (m *EventWhat) Reset()                    { *m = EventWhat{} }
func (m *EventWhat) String() string            { return proto1.CompactTextString(m) }
func (*EventWhat) ProtoMessage()               {}
func (*EventWhat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *EventWhat) GetApplication() *EventMessage {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *EventWhat) GetLibraries() *LibrariesMessage {
	if m != nil {
		return m.Libraries
	}
	return nil
}

type EventRepresentation struct {
	When     *EventWhen     `protobuf:"bytes,1,opt,name=when" json:"when,omitempty"`
	Where    *EventWhere    `protobuf:"bytes,2,opt,name=where" json:"where,omitempty"`
	Recorder *EventRecorder `protobuf:"bytes,3,opt,name=recorder" json:"recorder,omitempty"`
	What     *EventWhat     `protobuf:"bytes,4,opt,name=what" json:"what,omitempty"`
}

func (m *EventRepresentation) Reset()                    { *m = EventRepresentation{} }
func (m *EventRepresentation) String() string            { return proto1.CompactTextString(m) }
func (*EventRepresentation) ProtoMessage()               {}
func (*EventRepresentation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *EventRepresentation) GetWhen() *EventWhen {
	if m != nil {
		return m.When
	}
	return nil
}

func (m *EventRepresentation) GetWhere() *EventWhere {
	if m != nil {
		return m.Where
	}
	return nil
}

func (m *EventRepresentation) GetRecorder() *EventRecorder {
	if m != nil {
		return m.Recorder
	}
	return nil
}

func (m *EventRepresentation) GetWhat() *EventWhat {
	if m != nil {
		return m.What
	}
	return nil
}

// ******************* Event Metadata
type ParentChildPointers struct {
	Parent   int64   `protobuf:"varint,1,opt,name=parent" json:"parent,omitempty"`
	Children []int64 `protobuf:"varint,2,rep,packed,name=children" json:"children,omitempty"`
}

func (m *ParentChildPointers) Reset()                    { *m = ParentChildPointers{} }
func (m *ParentChildPointers) String() string            { return proto1.CompactTextString(m) }
func (*ParentChildPointers) ProtoMessage()               {}
func (*ParentChildPointers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ParentChildPointers) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *ParentChildPointers) GetChildren() []int64 {
	if m != nil {
		return m.Children
	}
	return nil
}

type EventMetadata struct {
	Id  int64                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Pcp *ParentChildPointers `protobuf:"bytes,2,opt,name=pcp" json:"pcp,omitempty"`
	Esp int64                `protobuf:"varint,3,opt,name=esp" json:"esp,omitempty"`
}

func (m *EventMetadata) Reset()                    { *m = EventMetadata{} }
func (m *EventMetadata) String() string            { return proto1.CompactTextString(m) }
func (*EventMetadata) ProtoMessage()               {}
func (*EventMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *EventMetadata) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventMetadata) GetPcp() *ParentChildPointers {
	if m != nil {
		return m.Pcp
	}
	return nil
}

func (m *EventMetadata) GetEsp() int64 {
	if m != nil {
		return m.Esp
	}
	return 0
}

// ******************* Event Data
type EventData struct {
	Event    *EventRepresentation `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	Metadata *EventMetadata       `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *EventData) Reset()                    { *m = EventData{} }
func (m *EventData) String() string            { return proto1.CompactTextString(m) }
func (*EventData) ProtoMessage()               {}
func (*EventData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *EventData) GetEvent() *EventRepresentation {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventData) GetMetadata() *EventMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Record struct {
	Type      RecordType `protobuf:"varint,1,opt,name=type,enum=context_bus.RecordType" json:"type,omitempty"`
	Timestamp int64      `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	MessageName string     `protobuf:"bytes,3,opt,name=message_name,json=messageName" json:"message_name,omitempty"`
	Uuid        string     `protobuf:"bytes,4,opt,name=uuid" json:"uuid,omitempty"`
	Service     string     `protobuf:"bytes,5,opt,name=service" json:"service,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto1.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *Record) GetType() RecordType {
	if m != nil {
		return m.Type
	}
	return RecordType_RecordType_
}

func (m *Record) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Record) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

func (m *Record) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Record) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

// ******************* Integration *******************
type LineageSnapshot struct {
	NumOfInvok map[string]int64 `protobuf:"bytes,1,rep,name=NumOfInvok" json:"NumOfInvok,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Latency    map[string]int64 `protobuf:"bytes,2,rep,name=Latency" json:"Latency,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *LineageSnapshot) Reset()                    { *m = LineageSnapshot{} }
func (m *LineageSnapshot) String() string            { return proto1.CompactTextString(m) }
func (*LineageSnapshot) ProtoMessage()               {}
func (*LineageSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *LineageSnapshot) GetNumOfInvok() map[string]int64 {
	if m != nil {
		return m.NumOfInvok
	}
	return nil
}

func (m *LineageSnapshot) GetLatency() map[string]int64 {
	if m != nil {
		return m.Latency
	}
	return nil
}

type Payload struct {
	RequestId int64            `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	ConfigId  int64            `protobuf:"varint,2,opt,name=config_id,json=configId" json:"config_id,omitempty"`
	Snapshot  *LineageSnapshot `protobuf:"bytes,3,opt,name=snapshot" json:"snapshot,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto1.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Payload) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *Payload) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Payload) GetSnapshot() *LineageSnapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func init() {
	proto1.RegisterType((*Condition)(nil), "context_bus.Condition")
	proto1.RegisterType((*Prerequisite)(nil), "context_bus.Prerequisite")
	proto1.RegisterType((*PrerequisiteTree)(nil), "context_bus.PrerequisiteTree")
	proto1.RegisterType((*FaultDelayParam)(nil), "context_bus.FaultDelayParam")
	proto1.RegisterType((*TrafficBalanceParam)(nil), "context_bus.TrafficBalanceParam")
	proto1.RegisterType((*TrafficRoutingParam)(nil), "context_bus.TrafficRoutingParam")
	proto1.RegisterType((*Reaction)(nil), "context_bus.Reaction")
	proto1.RegisterType((*Path)(nil), "context_bus.Path")
	proto1.RegisterType((*AttributeConfiguration)(nil), "context_bus.AttributeConfiguration")
	proto1.RegisterType((*TimestampConfiguration)(nil), "context_bus.TimestampConfiguration")
	proto1.RegisterType((*StackTraceConfiguration)(nil), "context_bus.StackTraceConfiguration")
	proto1.RegisterType((*LoggingConfigure)(nil), "context_bus.LoggingConfigure")
	proto1.RegisterType((*TracingConfigure)(nil), "context_bus.TracingConfigure")
	proto1.RegisterType((*MetricsConfigure)(nil), "context_bus.MetricsConfigure")
	proto1.RegisterType((*Observation)(nil), "context_bus.Observation")
	proto1.RegisterType((*Configure)(nil), "context_bus.Configure")
	proto1.RegisterType((*CPUProfile)(nil), "context_bus.CPUProfile")
	proto1.RegisterType((*MemProfile)(nil), "context_bus.MemProfile")
	proto1.RegisterType((*NetProfile)(nil), "context_bus.NetProfile")
	proto1.RegisterType((*HardwareProfile)(nil), "context_bus.HardwareProfile")
	proto1.RegisterType((*LanguageGo)(nil), "context_bus.LanguageGo")
	proto1.RegisterType((*LanguageJava)(nil), "context_bus.LanguageJava")
	proto1.RegisterType((*LanguageProfile)(nil), "context_bus.LanguageProfile")
	proto1.RegisterType((*EnvironmentalProfile)(nil), "context_bus.EnvironmentalProfile")
	proto1.RegisterType((*EventWhen)(nil), "context_bus.EventWhen")
	proto1.RegisterType((*AttributeValue)(nil), "context_bus.AttributeValue")
	proto1.RegisterType((*Attributes)(nil), "context_bus.Attributes")
	proto1.RegisterType((*EventWhere)(nil), "context_bus.EventWhere")
	proto1.RegisterType((*EventRecorder)(nil), "context_bus.EventRecorder")
	proto1.RegisterType((*EventMessage)(nil), "context_bus.EventMessage")
	proto1.RegisterType((*LibrariesMessage)(nil), "context_bus.LibrariesMessage")
	proto1.RegisterType((*EventWhat)(nil), "context_bus.EventWhat")
	proto1.RegisterType((*EventRepresentation)(nil), "context_bus.EventRepresentation")
	proto1.RegisterType((*ParentChildPointers)(nil), "context_bus.ParentChildPointers")
	proto1.RegisterType((*EventMetadata)(nil), "context_bus.EventMetadata")
	proto1.RegisterType((*EventData)(nil), "context_bus.EventData")
	proto1.RegisterType((*Record)(nil), "context_bus.Record")
	proto1.RegisterType((*LineageSnapshot)(nil), "context_bus.LineageSnapshot")
	proto1.RegisterType((*Payload)(nil), "context_bus.Payload")
	proto1.RegisterEnum("context_bus.ConditionOperator", ConditionOperator_name, ConditionOperator_value)
	proto1.RegisterEnum("context_bus.ConditionType", ConditionType_name, ConditionType_value)
	proto1.RegisterEnum("context_bus.ReactionType", ReactionType_name, ReactionType_value)
	proto1.RegisterEnum("context_bus.PathType", PathType_name, PathType_value)
	proto1.RegisterEnum("context_bus.MetricType", MetricType_name, MetricType_value)
	proto1.RegisterEnum("context_bus.LanguageType", LanguageType_name, LanguageType_value)
	proto1.RegisterEnum("context_bus.AttributeValueType", AttributeValueType_name, AttributeValueType_value)
	proto1.RegisterEnum("context_bus.EventRecorderType", EventRecorderType_name, EventRecorderType_value)
	proto1.RegisterEnum("context_bus.MessageType", MessageType_name, MessageType_value)
	proto1.RegisterEnum("context_bus.RecordType", RecordType_name, RecordType_value)
}

func init() { proto1.RegisterFile("context_bus.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x59, 0x5f, 0x6f, 0x1b, 0xc7,
	0x11, 0xf7, 0x1d, 0xa9, 0x3f, 0x1c, 0xc9, 0xd2, 0x69, 0x2d, 0xcb, 0xb4, 0xec, 0x24, 0xca, 0x35,
	0x29, 0x14, 0x26, 0x91, 0x12, 0x19, 0x4d, 0xdc, 0x04, 0x45, 0x63, 0xd3, 0xb2, 0x64, 0x57, 0xb2,
	0x99, 0xa5, 0x5c, 0xa3, 0x4d, 0x01, 0x61, 0x75, 0x5c, 0x91, 0x57, 0xf3, 0xfe, 0x64, 0x6f, 0x49,
	0x9b, 0xed, 0x43, 0x51, 0xa0, 0x05, 0x8a, 0x3e, 0xb6, 0xcf, 0x45, 0x5f, 0xfa, 0xd2, 0x0f, 0xd0,
	0x3f, 0x9f, 0xa2, 0x28, 0xda, 0xa2, 0xe8, 0x87, 0xe8, 0x43, 0x3f, 0x42, 0x31, 0xbb, 0x7b, 0xc7,
	0x5b, 0x92, 0x12, 0xe0, 0x27, 0xed, 0xcc, 0xfd, 0xe6, 0xb7, 0xb3, 0x33, 0xb3, 0xbb, 0xc3, 0x15,
	0xac, 0x05, 0x49, 0x2c, 0xf9, 0x2b, 0x79, 0x7a, 0x36, 0xc8, 0x76, 0x52, 0x91, 0xc8, 0x84, 0x2c,
	0x95, 0x54, 0xfe, 0xcf, 0x1d, 0xa8, 0x35, 0x93, 0xb8, 0x13, 0xca, 0x30, 0x89, 0xc9, 0x0e, 0x54,
	0xe5, 0x28, 0xe5, 0x75, 0x67, 0xcb, 0xd9, 0x5e, 0xd9, 0xdb, 0xdc, 0x29, 0x1b, 0x17, 0xa8, 0x93,
	0x51, 0xca, 0xa9, 0xc2, 0x91, 0x1d, 0x70, 0x93, 0xb4, 0xee, 0x2a, 0xf4, 0x9b, 0xb3, 0xd1, 0x4f,
	0x53, 0x2e, 0x98, 0x4c, 0x04, 0x75, 0x93, 0x94, 0xac, 0xc3, 0xdc, 0x90, 0xf5, 0x07, 0xbc, 0x5e,
	0xd9, 0x72, 0xb6, 0x2b, 0x54, 0x0b, 0xfe, 0x6f, 0x1d, 0x58, 0x6e, 0x09, 0x2e, 0xf8, 0xd7, 0x83,
	0x30, 0x0b, 0x25, 0x27, 0x6f, 0xc3, 0x72, 0xc4, 0xb3, 0x8c, 0x75, 0xf9, 0x69, 0xcc, 0x22, 0xed,
	0x4e, 0x8d, 0x2e, 0x19, 0xdd, 0x13, 0x16, 0x71, 0xf2, 0x01, 0xcc, 0x05, 0x49, 0xdc, 0xc9, 0xea,
	0xee, 0x56, 0x65, 0x7b, 0x69, 0x6f, 0x63, 0xf6, 0xe4, 0x54, 0x83, 0xc8, 0x06, 0xcc, 0xa7, 0x4c,
	0xf0, 0x58, 0xd6, 0x3b, 0x6a, 0x62, 0x23, 0x91, 0x4d, 0x58, 0x0c, 0x7a, 0x61, 0xbf, 0x23, 0x78,
	0x5c, 0xe7, 0x5b, 0x95, 0xed, 0x0a, 0x2d, 0x64, 0x5f, 0x82, 0x57, 0x76, 0xea, 0x44, 0x70, 0x4e,
	0x3e, 0x84, 0x6a, 0x2a, 0x78, 0x56, 0x77, 0xd4, 0xa4, 0x37, 0xad, 0x49, 0xcb, 0x60, 0xaa, 0x60,
	0xe4, 0x63, 0x98, 0xef, 0x73, 0x36, 0xe4, 0xb9, 0x97, 0x97, 0x18, 0x18, 0xa0, 0xff, 0x36, 0xac,
	0x3e, 0x64, 0x83, 0xbe, 0x7c, 0xc0, 0xfb, 0x6c, 0xd4, 0x62, 0x82, 0x45, 0x64, 0x05, 0xdc, 0x28,
	0x53, 0x31, 0xa8, 0x50, 0x37, 0xca, 0xfc, 0xeb, 0x70, 0xed, 0x44, 0xb0, 0xf3, 0xf3, 0x30, 0xb8,
	0xcf, 0xfa, 0x2c, 0x0e, 0xb8, 0x82, 0x95, 0xd4, 0x34, 0x19, 0xc8, 0x30, 0xee, 0x6a, 0xf5, 0x7f,
	0x5c, 0x58, 0xa4, 0x9c, 0x05, 0x2a, 0xbf, 0x1f, 0x5a, 0xf9, 0xb5, 0xdd, 0xc9, 0x41, 0xa5, 0xf4,
	0x7e, 0x17, 0x60, 0xec, 0x4c, 0xfd, 0x1f, 0xab, 0x5b, 0xce, 0xf6, 0xd2, 0xde, 0x6d, 0xcb, 0x6a,
	0xc2, 0xd9, 0xc3, 0x2b, 0xb4, 0x64, 0x42, 0xbe, 0x07, 0x2b, 0xb6, 0xab, 0xf5, 0x3f, 0x79, 0x8a,
	0x64, 0xcb, 0x22, 0x99, 0xb1, 0x9c, 0xc3, 0x2b, 0x74, 0xc2, 0xb4, 0x44, 0x66, 0x16, 0x58, 0xff,
	0xf3, 0x25, 0x64, 0xe5, 0x20, 0x94, 0xc8, 0x8c, 0x9a, 0xdc, 0x85, 0xc5, 0x54, 0xf0, 0x53, 0x29,
	0x38, 0x16, 0x23, 0x26, 0xe7, 0x8d, 0x0b, 0x93, 0x83, 0xa9, 0xa7, 0x0b, 0xa9, 0x50, 0x83, 0xfb,
	0x8b, 0xaa, 0x96, 0x58, 0x94, 0xf9, 0xfb, 0x50, 0x6d, 0x31, 0xd9, 0x23, 0xef, 0x59, 0x51, 0xbd,
	0x6e, 0xf3, 0x30, 0xd9, 0x2b, 0x45, 0x94, 0x40, 0x35, 0x65, 0xb2, 0xa7, 0xea, 0xa1, 0x46, 0xd5,
	0xd8, 0x6f, 0xc3, 0xc6, 0x3d, 0x29, 0x45, 0x78, 0x36, 0x90, 0xbc, 0x99, 0xc4, 0xe7, 0x61, 0x77,
	0x20, 0x98, 0x4a, 0x17, 0x81, 0x6a, 0xa9, 0xfe, 0xd5, 0x98, 0xbc, 0x5b, 0x30, 0xe0, 0xd2, 0xd7,
	0xa6, 0x26, 0x33, 0xa4, 0x1f, 0xc1, 0xc6, 0x49, 0x18, 0xf1, 0x4c, 0xb2, 0x28, 0xb5, 0x49, 0x37,
	0x60, 0xfe, 0x3c, 0x11, 0x11, 0x93, 0x86, 0xd6, 0x48, 0xfe, 0x4d, 0xb8, 0xd1, 0x96, 0x2c, 0x78,
	0x71, 0x22, 0x58, 0x60, 0xfb, 0xe1, 0xff, 0xdb, 0x01, 0xef, 0x28, 0xe9, 0x76, 0xc3, 0xb8, 0x9b,
	0x7f, 0xe0, 0xe4, 0x1e, 0xd4, 0x64, 0x3e, 0x83, 0xa2, 0x5a, 0xda, 0xfb, 0x86, 0x9d, 0x88, 0x99,
	0xf3, 0xd3, 0xb1, 0x15, 0x79, 0x00, 0x90, 0xe1, 0x94, 0x12, 0xa7, 0x34, 0x2b, 0x7a, 0xc7, 0xe2,
	0xb8, 0xc0, 0x23, 0x5a, 0xb2, 0x23, 0xdf, 0x86, 0x39, 0x26, 0xa5, 0xc8, 0x4c, 0x1e, 0x6d, 0x27,
	0x66, 0x47, 0x96, 0x6a, 0x0b, 0xff, 0x18, 0x3c, 0x24, 0xb7, 0xd6, 0x55, 0xd0, 0x39, 0xaf, 0x4d,
	0xf7, 0x13, 0xf0, 0x8e, 0xb9, 0x14, 0x61, 0x90, 0x8d, 0xe9, 0xde, 0xb7, 0x8a, 0xe3, 0x86, 0xc5,
	0xa6, 0xc1, 0x76, 0x79, 0xa8, 0x84, 0xbb, 0x76, 0xc2, 0x25, 0xeb, 0xe6, 0xab, 0x9b, 0x95, 0x70,
	0xfc, 0xec, 0xff, 0xd5, 0x81, 0xa5, 0xa7, 0x67, 0x19, 0x17, 0x43, 0x9d, 0xe6, 0x4f, 0x61, 0xa1,
	0xaf, 0x53, 0x66, 0x92, 0x63, 0xd7, 0xf7, 0x64, 0x3a, 0x69, 0x8e, 0x46, 0x43, 0xa9, 0x63, 0x62,
	0x32, 0xf2, 0xc6, 0xe4, 0xf6, 0x0a, 0x6c, 0x43, 0x83, 0x46, 0xc3, 0x48, 0xaf, 0x7e, 0xe6, 0x8e,
	0x9a, 0x8c, 0x0c, 0xcd, 0xd1, 0xfe, 0xdf, 0x5c, 0x75, 0x07, 0x99, 0x80, 0x35, 0xa1, 0x26, 0xcc,
	0x51, 0x94, 0xe7, 0xe0, 0xdd, 0xc9, 0xd3, 0x5d, 0x43, 0x8b, 0x23, 0x2b, 0xdb, 0x8f, 0xa5, 0x18,
	0xd1, 0xb1, 0x1d, 0x39, 0x82, 0xe5, 0x64, 0x1c, 0x8c, 0xfc, 0xfc, 0xdd, 0xbe, 0x80, 0xa7, 0x14,
	0x37, 0x43, 0x65, 0x59, 0x6f, 0xb6, 0x61, 0xc5, 0x9e, 0x8a, 0x78, 0x50, 0x79, 0xc1, 0x47, 0x66,
	0x07, 0xe1, 0x90, 0xbc, 0x9f, 0x5f, 0x6d, 0x3a, 0x68, 0xd7, 0x67, 0x9e, 0xad, 0xe6, 0xc6, 0xfb,
	0xcc, 0xbd, 0xeb, 0x6c, 0xfe, 0x00, 0xd6, 0xa6, 0xe6, 0x9d, 0xc1, 0xbb, 0x63, 0xf3, 0xd6, 0x2d,
	0xde, 0x12, 0x41, 0x89, 0xda, 0xff, 0x26, 0x40, 0xb3, 0xf5, 0xac, 0x25, 0x92, 0xf3, 0xb0, 0xcf,
	0x49, 0x1d, 0x16, 0x52, 0x2e, 0x02, 0xbc, 0xfd, 0x90, 0xd7, 0xa1, 0xb9, 0xe8, 0xff, 0xda, 0x01,
	0x38, 0xe6, 0x51, 0x0e, 0x5c, 0x87, 0x39, 0x99, 0x48, 0xd6, 0x57, 0xb0, 0x2a, 0xd5, 0x02, 0xb9,
	0x0d, 0x35, 0x36, 0x64, 0x61, 0x9f, 0x9d, 0xf5, 0xb5, 0x13, 0x55, 0x3a, 0x56, 0x60, 0xc5, 0x0e,
	0x32, 0xde, 0x51, 0x17, 0x7a, 0x95, 0xaa, 0x31, 0xd9, 0x82, 0x25, 0xfc, 0xdb, 0x32, 0x93, 0x56,
	0xd5, 0xa4, 0x65, 0x15, 0x5a, 0x9d, 0xe3, 0xc9, 0x3b, 0xa7, 0xad, 0x70, 0xec, 0xff, 0xd7, 0x01,
	0x78, 0xc2, 0x65, 0xee, 0xcc, 0x6d, 0xa8, 0x9d, 0x8d, 0x24, 0xcf, 0xda, 0xb9, 0xdf, 0x55, 0x3a,
	0x56, 0x14, 0x5f, 0x29, 0x0f, 0x86, 0xb9, 0x53, 0x85, 0x02, 0x1d, 0x48, 0x59, 0xf0, 0x82, 0x4b,
	0x6d, 0xad, 0x7d, 0x2b, 0xab, 0x4a, 0x08, 0xc5, 0x50, 0xb5, 0x10, 0x8a, 0x63, 0x1d, 0xe6, 0xb8,
	0x10, 0x61, 0x6c, 0x7c, 0xd4, 0x02, 0x1e, 0x9e, 0x5c, 0x88, 0x64, 0x20, 0xeb, 0xf3, 0x4a, 0x6d,
	0x24, 0xd4, 0x77, 0x44, 0x92, 0x86, 0x71, 0x7d, 0x41, 0xeb, 0xb5, 0x84, 0xb1, 0xc7, 0x11, 0x1a,
	0x2c, 0xaa, 0x0f, 0xb9, 0xe8, 0xff, 0xc6, 0x81, 0xd5, 0x43, 0x26, 0x3a, 0x2f, 0x99, 0xe0, 0xf9,
	0x9a, 0xdf, 0x83, 0x4a, 0x90, 0x0e, 0xcc, 0x7e, 0xb5, 0x8f, 0x8a, 0x71, 0x3e, 0x29, 0x62, 0x10,
	0x1a, 0xf1, 0xc8, 0x14, 0xc5, 0xe4, 0xa9, 0x12, 0x15, 0xd0, 0x88, 0x47, 0x08, 0x8d, 0xb9, 0x8e,
	0xc2, 0x24, 0x74, 0x1c, 0x6f, 0x8a, 0x18, 0xff, 0x7f, 0x2e, 0xc0, 0x11, 0x8b, 0xbb, 0x03, 0xd6,
	0xe5, 0x07, 0x09, 0x7a, 0x7f, 0xc8, 0x59, 0xda, 0x1e, 0x65, 0x26, 0x03, 0xb9, 0x88, 0xf1, 0xc7,
	0xe1, 0xbd, 0x7e, 0x3f, 0x09, 0xf2, 0xf8, 0x17, 0x8a, 0xfc, 0xeb, 0xa3, 0x78, 0x90, 0x71, 0x13,
	0xfd, 0xb1, 0x02, 0x9b, 0x2e, 0x75, 0xac, 0x23, 0xad, 0x0e, 0x7c, 0x21, 0x93, 0x37, 0x01, 0xd4,
	0x58, 0x9b, 0xea, 0xd0, 0x97, 0x34, 0xf8, 0xfd, 0xb8, 0x9d, 0xb2, 0x58, 0x7f, 0xd7, 0x39, 0x28,
	0x69, 0x90, 0x5b, 0x49, 0xc8, 0xad, 0x33, 0x51, 0xc8, 0x98, 0xf3, 0xe3, 0x26, 0x0b, 0x7a, 0x5c,
	0x1b, 0xeb, 0x7c, 0x94, 0x55, 0xe8, 0xb7, 0x16, 0xd1, 0xbc, 0xa6, 0xfd, 0x2e, 0x14, 0x98, 0xe3,
	0x23, 0x96, 0xc9, 0x83, 0x66, 0x9d, 0xeb, 0x1c, 0x6b, 0x09, 0xf5, 0x4f, 0xf8, 0x2b, 0xd4, 0x9f,
	0x6b, 0xbd, 0x96, 0xc8, 0x3b, 0x70, 0xf5, 0xa0, 0xd9, 0x6c, 0x3d, 0x7b, 0x28, 0xf4, 0xe6, 0xaf,
	0x77, 0xd5, 0x46, 0xb0, 0x95, 0xfe, 0x0a, 0x2c, 0xe7, 0x11, 0x7f, 0xcc, 0x86, 0xcc, 0xff, 0xa3,
	0x03, 0xab, 0xb9, 0x22, 0xaf, 0x8b, 0xcb, 0xda, 0xb6, 0x1c, 0x5b, 0xba, 0x45, 0x1a, 0xe0, 0x76,
	0x93, 0xbc, 0x5d, 0xbb, 0x31, 0x13, 0x7d, 0x90, 0x1c, 0x5e, 0xa1, 0x6e, 0x37, 0x21, 0x1f, 0x41,
	0xf5, 0xc7, 0x6c, 0xc8, 0xea, 0xff, 0xd4, 0xe8, 0xd9, 0xdc, 0xe8, 0xd8, 0xe1, 0x15, 0xaa, 0x90,
	0xf7, 0x6b, 0xb0, 0x60, 0xfc, 0xf2, 0xff, 0xee, 0xc0, 0xfa, 0x7e, 0x3c, 0x0c, 0x45, 0x12, 0x47,
	0x3c, 0x96, 0xac, 0x5f, 0xda, 0xbc, 0x76, 0x6f, 0x50, 0x29, 0x5f, 0xfb, 0x77, 0x61, 0xb1, 0x67,
	0x2a, 0xdf, 0x14, 0xb0, 0xdd, 0x53, 0x4e, 0x6c, 0x0b, 0x5a, 0xa0, 0xd1, 0xb2, 0x6f, 0x7c, 0x32,
	0xf5, 0x7c, 0x7b, 0xa6, 0xc3, 0x85, 0x65, 0x8e, 0x56, 0x8d, 0x97, 0xe0, 0x43, 0x95, 0xba, 0x8a,
	0x6a, 0xcf, 0x87, 0xea, 0xb6, 0xe5, 0xaf, 0xa4, 0x4a, 0x5b, 0x85, 0xaa, 0xb1, 0xff, 0x16, 0xd4,
	0xf6, 0x87, 0x3c, 0x96, 0xcf, 0x7b, 0x5c, 0xf5, 0x5f, 0xe8, 0xb5, 0x59, 0x81, 0x1a, 0xfb, 0xbf,
	0x72, 0x60, 0xa5, 0xe8, 0x02, 0xbe, 0x8f, 0x47, 0x2e, 0xb9, 0x63, 0xa5, 0xe7, 0xad, 0xd9, 0x0d,
	0x83, 0x82, 0x96, 0x92, 0xe4, 0x41, 0x25, 0x93, 0xc2, 0xdc, 0xf4, 0x38, 0x24, 0xbb, 0x30, 0x9f,
	0x49, 0x31, 0x08, 0x66, 0x6f, 0xd5, 0x82, 0x28, 0xa3, 0x06, 0xe6, 0xff, 0xce, 0x01, 0x18, 0xab,
	0xc9, 0x5d, 0xbb, 0x71, 0xf1, 0x2f, 0x30, 0x57, 0x43, 0x73, 0xcd, 0x69, 0x83, 0xcd, 0x67, 0x9a,
	0xe7, 0xc2, 0x3b, 0xe8, 0x63, 0xfb, 0x0e, 0xba, 0x75, 0xc9, 0x0a, 0xcb, 0xd7, 0xd0, 0x57, 0x00,
	0x79, 0x2c, 0x05, 0x16, 0x71, 0xe1, 0xde, 0xa5, 0xab, 0xd3, 0x28, 0xdc, 0xe9, 0x13, 0xbd, 0x61,
	0xad, 0xdc, 0xf5, 0xf9, 0xcf, 0xe1, 0xaa, 0x22, 0xa7, 0x3c, 0x48, 0x44, 0x87, 0x0b, 0xb2, 0x67,
	0x65, 0xc1, 0xfe, 0x35, 0x6a, 0x21, 0x2f, 0xef, 0xb7, 0xfc, 0xe7, 0xb0, 0xac, 0xe0, 0xc7, 0xfa,
	0xd7, 0xe6, 0xeb, 0xfa, 0x5d, 0xc7, 0x2e, 0x48, 0x59, 0x1a, 0xd6, 0x5c, 0xf4, 0xff, 0x82, 0x5d,
	0x74, 0x78, 0x26, 0x98, 0x08, 0x79, 0x96, 0xb3, 0x3f, 0x86, 0x5a, 0x3f, 0xd7, 0x99, 0xc4, 0x7d,
	0x60, 0x97, 0xf4, 0x84, 0xc5, 0x58, 0x61, 0x9a, 0x9e, 0xc2, 0x7c, 0xf3, 0x39, 0xac, 0xd8, 0x1f,
	0x67, 0xa4, 0x72, 0xd7, 0x4e, 0xe5, 0xcd, 0xe9, 0x30, 0x99, 0x79, 0xca, 0x89, 0xfc, 0xa5, 0x53,
	0xec, 0x0a, 0x26, 0xc9, 0xe7, 0xb0, 0xc4, 0xd2, 0xb4, 0x1f, 0x06, 0xaa, 0xef, 0x30, 0x61, 0xb9,
	0x84, 0xa8, 0x8c, 0x26, 0x9f, 0x97, 0xd7, 0x3b, 0xab, 0xbf, 0x9c, 0x5c, 0x6f, 0x69, 0x81, 0xfe,
	0xbf, 0x1c, 0xb8, 0x66, 0x52, 0x89, 0xbf, 0xaf, 0xf1, 0xc8, 0x51, 0xa4, 0x0d, 0xa8, 0xbe, 0xec,
	0xf1, 0xdc, 0x95, 0x8d, 0x69, 0x57, 0x70, 0x37, 0x53, 0x85, 0xc1, 0x74, 0xbe, 0xc4, 0x7a, 0x9c,
	0x79, 0x75, 0x8e, 0xcb, 0x95, 0x6a, 0x14, 0xf9, 0x04, 0x16, 0x85, 0xa9, 0x1b, 0xb3, 0x2d, 0x37,
	0x2f, 0xae, 0x2c, 0x5a, 0x60, 0xb5, 0x4b, 0x4c, 0x37, 0x3f, 0x17, 0xb8, 0xc4, 0x24, 0x55, 0x18,
	0xff, 0x11, 0x5c, 0x6b, 0xa9, 0xf7, 0x88, 0x66, 0x2f, 0xec, 0x77, 0x5a, 0x49, 0x18, 0x4b, 0x2e,
	0xca, 0x8f, 0x16, 0xce, 0x85, 0x8f, 0x16, 0xee, 0xc4, 0xa3, 0x05, 0x37, 0xbb, 0xe2, 0x98, 0x4b,
	0xd6, 0x61, 0x92, 0x91, 0x15, 0x70, 0xc3, 0x4e, 0xfe, 0x78, 0x10, 0x76, 0xc8, 0x1e, 0x54, 0xd2,
	0x20, 0x35, 0x8b, 0xdf, 0x9a, 0xf8, 0x31, 0x31, 0xe5, 0x03, 0x45, 0x30, 0x56, 0x11, 0xcf, 0x52,
	0xf3, 0x66, 0x83, 0x43, 0xff, 0xa7, 0xa6, 0x1e, 0x1e, 0xe0, 0x14, 0x9f, 0xc0, 0x1c, 0x1f, 0xe6,
	0x6e, 0x4e, 0x92, 0xce, 0x48, 0x17, 0xd5, 0x70, 0x0c, 0x6d, 0x64, 0xdc, 0x34, 0xfe, 0x6c, 0xce,
	0x2a, 0x22, 0x8d, 0xa0, 0x05, 0xd6, 0xff, 0x83, 0x03, 0xf3, 0x3a, 0xe2, 0x97, 0xfe, 0xb8, 0xd2,
	0x90, 0xd2, 0x66, 0xb7, 0x2e, 0x25, 0x77, 0xf2, 0x52, 0x9a, 0x7c, 0x73, 0xaa, 0x4c, 0xbf, 0x39,
	0x61, 0xaf, 0x3b, 0x08, 0x3b, 0x2a, 0xa7, 0x35, 0xaa, 0xc6, 0xb8, 0xdd, 0xb1, 0x05, 0x0f, 0x03,
	0xdd, 0xad, 0xd4, 0x68, 0x2e, 0xfa, 0xbf, 0x77, 0x61, 0xf5, 0x28, 0x8c, 0x39, 0xeb, 0xf2, 0x76,
	0xcc, 0xd2, 0xac, 0x97, 0x48, 0x72, 0x04, 0xf0, 0x64, 0x10, 0x3d, 0x3d, 0x7f, 0x14, 0x0f, 0x93,
	0x17, 0x17, 0x6c, 0x77, 0xcb, 0x62, 0x67, 0x0c, 0xd7, 0xdb, 0xbd, 0x64, 0x4f, 0x9a, 0xb0, 0x70,
	0xc4, 0x24, 0x8f, 0x83, 0x91, 0xf9, 0x7d, 0xf3, 0xde, 0xa5, 0x54, 0x06, 0xab, 0x79, 0x72, 0xcb,
	0xcd, 0xef, 0xc0, 0xea, 0xc4, 0x1c, 0x33, 0x4e, 0x8d, 0xf5, 0xf2, 0xa9, 0x51, 0x29, 0xff, 0x8a,
	0xf9, 0x0c, 0xdb, 0x97, 0x31, 0xef, 0xeb, 0xd8, 0xfa, 0x3f, 0x83, 0x85, 0x16, 0x1b, 0xf5, 0x13,
	0xd6, 0x21, 0x6f, 0x00, 0x08, 0xfe, 0xf5, 0x80, 0x67, 0xf2, 0xb4, 0x28, 0xd7, 0x9a, 0xd1, 0x3c,
	0xea, 0x90, 0x5b, 0x50, 0x0b, 0xd4, 0xaf, 0x35, 0xfc, 0xaa, 0x79, 0x16, 0xb5, 0xe2, 0x51, 0x07,
	0x9b, 0x82, 0xcc, 0xac, 0x71, 0x76, 0x53, 0x60, 0xc7, 0x81, 0x16, 0xe8, 0xc6, 0x57, 0xb0, 0x36,
	0xf5, 0x4e, 0x49, 0x36, 0x80, 0x4c, 0x29, 0x4f, 0xbd, 0x2b, 0x64, 0x1e, 0xdc, 0xa3, 0x13, 0xcf,
	0xc1, 0xbf, 0x07, 0x27, 0x9e, 0xab, 0xe4, 0x7d, 0xaf, 0xa2, 0xe4, 0x7d, 0xaf, 0x8a, 0x7f, 0xf7,
	0xbf, 0xf4, 0xe6, 0xf0, 0xef, 0x93, 0x7d, 0x6f, 0xbe, 0xf1, 0x05, 0x5c, 0xb5, 0x9e, 0x4c, 0x09,
	0x81, 0x15, 0x4b, 0x81, 0xa4, 0x2b, 0xe5, 0x82, 0xf0, 0x1c, 0xb2, 0x54, 0xa4, 0xd4, 0x73, 0x1b,
	0xaf, 0x60, 0xb9, 0xfc, 0x28, 0x47, 0xd6, 0xe0, 0x6a, 0x59, 0x36, 0xf6, 0xea, 0xb9, 0xad, 0x29,
	0x58, 0xd6, 0xf3, 0x9c, 0x42, 0x56, 0xcf, 0x6f, 0x9e, 0x4b, 0xae, 0x42, 0x4d, 0xcb, 0x22, 0x49,
	0xbd, 0x0a, 0xba, 0x60, 0x3f, 0xaa, 0x79, 0xbc, 0xa4, 0x33, 0x6f, 0x63, 0xde, 0x79, 0xe3, 0x53,
	0x58, 0xcc, 0x1f, 0xae, 0x90, 0x22, 0x1f, 0xe3, 0x8c, 0xab, 0xb0, 0x74, 0x6f, 0x7c, 0x9e, 0x1b,
	0x97, 0xd5, 0x09, 0x8d, 0x2e, 0x7f, 0x89, 0x3f, 0x28, 0xf3, 0x47, 0x0d, 0xc4, 0x8e, 0x25, 0x34,
	0x5e, 0x82, 0x85, 0x66, 0x32, 0xc0, 0xa3, 0xc5, 0x73, 0x48, 0x0d, 0xe6, 0x0e, 0xd8, 0xa0, 0xcb,
	0xb5, 0x9b, 0x87, 0x61, 0x26, 0x93, 0xae, 0x60, 0x91, 0x57, 0x41, 0x58, 0x7b, 0x10, 0x45, 0x5c,
	0x8c, 0xbc, 0x6a, 0xe3, 0xfe, 0xb8, 0x41, 0xce, 0xa3, 0x50, 0x96, 0x91, 0xb6, 0x06, 0x73, 0x4f,
	0x65, 0x4f, 0x91, 0x02, 0xcc, 0x1f, 0x24, 0xd8, 0xf5, 0x79, 0x2e, 0x59, 0x84, 0x2a, 0x76, 0xae,
	0x5e, 0xa5, 0xf1, 0x23, 0x20, 0xd3, 0x8d, 0x18, 0xb9, 0x01, 0xd7, 0xa6, 0xb5, 0xc8, 0x77, 0x1d,
	0xd6, 0xec, 0x0f, 0x6d, 0x89, 0xdc, 0x1b, 0x93, 0x2c, 0x28, 0x79, 0x6e, 0xe3, 0x17, 0x0e, 0xac,
	0x4d, 0x75, 0x18, 0x88, 0x9e, 0x52, 0x22, 0xf9, 0x5b, 0x70, 0xcb, 0xd2, 0xb7, 0xf5, 0x79, 0x71,
	0xc8, 0xe2, 0x4e, 0x5f, 0x2d, 0xe1, 0x26, 0x5c, 0xb7, 0x00, 0x0f, 0x07, 0xb1, 0xca, 0xb9, 0xe7,
	0x92, 0x5b, 0x70, 0xc3, 0xe6, 0xec, 0x85, 0xa2, 0xd3, 0x62, 0x42, 0x8e, 0xbc, 0x4a, 0xe3, 0x31,
	0x46, 0x5b, 0x9d, 0x56, 0x27, 0xba, 0xc1, 0x5c, 0x2e, 0x89, 0x38, 0xf3, 0x35, 0x58, 0x35, 0x9a,
	0x53, 0xaa, 0xb7, 0x96, 0xe7, 0x90, 0x75, 0xf0, 0xc6, 0xca, 0x2c, 0x4d, 0xe2, 0x8c, 0x7b, 0x6e,
	0xe3, 0x0b, 0x80, 0xf1, 0xf9, 0x89, 0x79, 0x1c, 0x4b, 0xa6, 0xec, 0xb4, 0xa2, 0xcd, 0xe3, 0x8e,
	0xe7, 0xe8, 0xca, 0x44, 0x99, 0xf2, 0x80, 0x87, 0x43, 0xee, 0xb9, 0xf7, 0xbf, 0xf5, 0xc3, 0x3b,
	0xdd, 0x50, 0xf6, 0x06, 0x67, 0x3b, 0x41, 0x12, 0xed, 0xde, 0xeb, 0xf3, 0xe0, 0xc5, 0x03, 0x26,
	0x82, 0xd1, 0xae, 0xe0, 0xb8, 0xe3, 0x77, 0x83, 0x44, 0xf0, 0xdd, 0xd2, 0x36, 0xdd, 0x55, 0xff,
	0x9c, 0x38, 0x9b, 0x57, 0x7f, 0xee, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xab, 0xa4, 0x66, 0xc2,
	0xb8, 0x18, 0x00, 0x00,
}
