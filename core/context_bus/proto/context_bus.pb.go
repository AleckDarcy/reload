// Code generated by protoc-gen-go. DO NOT EDIT.
// source: context_bus.proto

/*
Package context_bus is a generated protocol buffer package.

It is generated from these files:
	context_bus.proto

It has these top-level messages:
	Record
	Payload
	Condition
	Prerequisite
	PrerequisiteTree
	FaultDelayParam
	TrafficBalanceParam
	TrafficRoutingParam
	Reaction
	ReactionConfigure
	Snapshot
	CPUProfile
	MemProfile
	NetProfile
	HardwareProfile
	LanguageGo
	LanguageJava
	LanguageProfile
	EnvironmentalSnapshot
*/
package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_MessageType_     MessageType = 0
	MessageType_Message_Request  MessageType = 1
	MessageType_Message_Response MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "MessageType_",
	1: "Message_Request",
	2: "Message_Response",
}
var MessageType_value = map[string]int32{
	"MessageType_":     0,
	"Message_Request":  1,
	"Message_Response": 2,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RecordType int32

const (
	RecordType_RecordType_   RecordType = 0
	RecordType_RecordSend    RecordType = 1
	RecordType_RecordReceive RecordType = 2
)

var RecordType_name = map[int32]string{
	0: "RecordType_",
	1: "RecordSend",
	2: "RecordReceive",
}
var RecordType_value = map[string]int32{
	"RecordType_":   0,
	"RecordSend":    1,
	"RecordReceive": 2,
}

func (x RecordType) String() string {
	return proto.EnumName(RecordType_name, int32(x))
}
func (RecordType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ConditionOperator int32

const (
	ConditionOperator_ConditionOperator_ ConditionOperator = 0
	ConditionOperator_LT                 ConditionOperator = 1
	ConditionOperator_GT                 ConditionOperator = 2
	ConditionOperator_LE                 ConditionOperator = 3
	ConditionOperator_GE                 ConditionOperator = 4
	ConditionOperator_EQ                 ConditionOperator = 5
	ConditionOperator_NE                 ConditionOperator = 6
)

var ConditionOperator_name = map[int32]string{
	0: "ConditionOperator_",
	1: "LT",
	2: "GT",
	3: "LE",
	4: "GE",
	5: "EQ",
	6: "NE",
}
var ConditionOperator_value = map[string]int32{
	"ConditionOperator_": 0,
	"LT":                 1,
	"GT":                 2,
	"LE":                 3,
	"GE":                 4,
	"EQ":                 5,
	"NE":                 6,
}

func (x ConditionOperator) String() string {
	return proto.EnumName(ConditionOperator_name, int32(x))
}
func (ConditionOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ConditionType int32

const (
	ConditionType_ConditionType_ ConditionType = 0
	ConditionType_NumOfInvok     ConditionType = 1
	ConditionType_Latency        ConditionType = 2
)

var ConditionType_name = map[int32]string{
	0: "ConditionType_",
	1: "NumOfInvok",
	2: "Latency",
}
var ConditionType_value = map[string]int32{
	"ConditionType_": 0,
	"NumOfInvok":     1,
	"Latency":        2,
}

func (x ConditionType) String() string {
	return proto.EnumName(ConditionType_name, int32(x))
}
func (ConditionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ReactionType int32

const (
	ReactionType_ReactionType_ ReactionType = 0
	// fault injection
	ReactionType_FaultCrash ReactionType = 1
	ReactionType_FaultDelay ReactionType = 2
	ReactionType_FaultDrop  ReactionType = 3
	// traffic (e.g., load-balancing, traffic shaping)
	ReactionType_TrafficBalance ReactionType = 101
	ReactionType_TrafficRouting ReactionType = 102
)

var ReactionType_name = map[int32]string{
	0:   "ReactionType_",
	1:   "FaultCrash",
	2:   "FaultDelay",
	3:   "FaultDrop",
	101: "TrafficBalance",
	102: "TrafficRouting",
}
var ReactionType_value = map[string]int32{
	"ReactionType_":  0,
	"FaultCrash":     1,
	"FaultDelay":     2,
	"FaultDrop":      3,
	"TrafficBalance": 101,
	"TrafficRouting": 102,
}

func (x ReactionType) String() string {
	return proto.EnumName(ReactionType_name, int32(x))
}
func (ReactionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type LanguageType int32

const (
	LanguageType_LanguageType_ LanguageType = 0
	LanguageType_Other         LanguageType = 1
	LanguageType_Golang        LanguageType = 2
	LanguageType_Java          LanguageType = 3
)

var LanguageType_name = map[int32]string{
	0: "LanguageType_",
	1: "Other",
	2: "Golang",
	3: "Java",
}
var LanguageType_value = map[string]int32{
	"LanguageType_": 0,
	"Other":         1,
	"Golang":        2,
	"Java":          3,
}

func (x LanguageType) String() string {
	return proto.EnumName(LanguageType_name, int32(x))
}
func (LanguageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Record struct {
	Type      RecordType `protobuf:"varint,1,opt,name=type,enum=context_bus.RecordType" json:"type,omitempty"`
	Timestamp int64      `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	MessageName string     `protobuf:"bytes,3,opt,name=message_name,json=messageName" json:"message_name,omitempty"`
	Uuid        string     `protobuf:"bytes,4,opt,name=uuid" json:"uuid,omitempty"`
	Service     string     `protobuf:"bytes,5,opt,name=service" json:"service,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Record) GetType() RecordType {
	if m != nil {
		return m.Type
	}
	return RecordType_RecordType_
}

func (m *Record) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Record) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

func (m *Record) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Record) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type Payload struct {
	RequestId int64 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Payload) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type Condition struct {
	Type  ConditionType     `protobuf:"varint,1,opt,name=type,enum=context_bus.ConditionType" json:"type,omitempty"`
	Op    ConditionOperator `protobuf:"varint,2,opt,name=op,enum=context_bus.ConditionOperator" json:"op,omitempty"`
	Value int64             `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (m *Condition) Reset()                    { *m = Condition{} }
func (m *Condition) String() string            { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()               {}
func (*Condition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Condition) GetType() ConditionType {
	if m != nil {
		return m.Type
	}
	return ConditionType_ConditionType_
}

func (m *Condition) GetOp() ConditionOperator {
	if m != nil {
		return m.Op
	}
	return ConditionOperator_ConditionOperator_
}

func (m *Condition) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Prerequisite struct {
	MessageName string       `protobuf:"bytes,1,opt,name=message_name,json=messageName" json:"message_name,omitempty"`
	Conds       []*Condition `protobuf:"bytes,2,rep,name=conds" json:"conds,omitempty"`
	// tree pointers
	Parent   int64   `protobuf:"varint,100,opt,name=parent" json:"parent,omitempty"`
	Children []int64 `protobuf:"varint,101,rep,packed,name=children" json:"children,omitempty"`
}

func (m *Prerequisite) Reset()                    { *m = Prerequisite{} }
func (m *Prerequisite) String() string            { return proto.CompactTextString(m) }
func (*Prerequisite) ProtoMessage()               {}
func (*Prerequisite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Prerequisite) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

func (m *Prerequisite) GetConds() []*Condition {
	if m != nil {
		return m.Conds
	}
	return nil
}

func (m *Prerequisite) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *Prerequisite) GetChildren() []int64 {
	if m != nil {
		return m.Children
	}
	return nil
}

// prerequisite tree
type PrerequisiteTree struct {
	Pres   []*Prerequisite `protobuf:"bytes,1,rep,name=pres" json:"pres,omitempty"`
	Leaves []*Prerequisite `protobuf:"bytes,2,rep,name=leaves" json:"leaves,omitempty"`
}

func (m *PrerequisiteTree) Reset()                    { *m = PrerequisiteTree{} }
func (m *PrerequisiteTree) String() string            { return proto.CompactTextString(m) }
func (*PrerequisiteTree) ProtoMessage()               {}
func (*PrerequisiteTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PrerequisiteTree) GetPres() []*Prerequisite {
	if m != nil {
		return m.Pres
	}
	return nil
}

func (m *PrerequisiteTree) GetLeaves() []*Prerequisite {
	if m != nil {
		return m.Leaves
	}
	return nil
}

type FaultDelayParam struct {
	Ms int64 `protobuf:"varint,1,opt,name=ms" json:"ms,omitempty"`
}

func (m *FaultDelayParam) Reset()                    { *m = FaultDelayParam{} }
func (m *FaultDelayParam) String() string            { return proto.CompactTextString(m) }
func (*FaultDelayParam) ProtoMessage()               {}
func (*FaultDelayParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FaultDelayParam) GetMs() int64 {
	if m != nil {
		return m.Ms
	}
	return 0
}

type TrafficBalanceParam struct {
}

func (m *TrafficBalanceParam) Reset()                    { *m = TrafficBalanceParam{} }
func (m *TrafficBalanceParam) String() string            { return proto.CompactTextString(m) }
func (*TrafficBalanceParam) ProtoMessage()               {}
func (*TrafficBalanceParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type TrafficRoutingParam struct {
}

func (m *TrafficRoutingParam) Reset()                    { *m = TrafficRoutingParam{} }
func (m *TrafficRoutingParam) String() string            { return proto.CompactTextString(m) }
func (*TrafficRoutingParam) ProtoMessage()               {}
func (*TrafficRoutingParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type Reaction struct {
	Type ReactionType `protobuf:"varint,1,opt,name=type,enum=context_bus.ReactionType" json:"type,omitempty"`
	// Types that are valid to be assigned to Params:
	//	*Reaction_FaultDelay
	//	*Reaction_TrafficBalance
	//	*Reaction_TrafficRouting
	Params  isReaction_Params   `protobuf_oneof:"params"`
	PreTree []*PrerequisiteTree `protobuf:"bytes,3,rep,name=pre_tree,json=preTree" json:"pre_tree,omitempty"`
}

func (m *Reaction) Reset()                    { *m = Reaction{} }
func (m *Reaction) String() string            { return proto.CompactTextString(m) }
func (*Reaction) ProtoMessage()               {}
func (*Reaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isReaction_Params interface{ isReaction_Params() }

type Reaction_FaultDelay struct {
	FaultDelay *FaultDelayParam `protobuf:"bytes,2002,opt,name=FaultDelay,oneof"`
}
type Reaction_TrafficBalance struct {
	TrafficBalance *TrafficBalanceParam `protobuf:"bytes,2101,opt,name=TrafficBalance,oneof"`
}
type Reaction_TrafficRouting struct {
	TrafficRouting *TrafficRoutingParam `protobuf:"bytes,2102,opt,name=TrafficRouting,oneof"`
}

func (*Reaction_FaultDelay) isReaction_Params()     {}
func (*Reaction_TrafficBalance) isReaction_Params() {}
func (*Reaction_TrafficRouting) isReaction_Params() {}

func (m *Reaction) GetParams() isReaction_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Reaction) GetType() ReactionType {
	if m != nil {
		return m.Type
	}
	return ReactionType_ReactionType_
}

func (m *Reaction) GetFaultDelay() *FaultDelayParam {
	if x, ok := m.GetParams().(*Reaction_FaultDelay); ok {
		return x.FaultDelay
	}
	return nil
}

func (m *Reaction) GetTrafficBalance() *TrafficBalanceParam {
	if x, ok := m.GetParams().(*Reaction_TrafficBalance); ok {
		return x.TrafficBalance
	}
	return nil
}

func (m *Reaction) GetTrafficRouting() *TrafficRoutingParam {
	if x, ok := m.GetParams().(*Reaction_TrafficRouting); ok {
		return x.TrafficRouting
	}
	return nil
}

func (m *Reaction) GetPreTree() []*PrerequisiteTree {
	if m != nil {
		return m.PreTree
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Reaction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Reaction_OneofMarshaler, _Reaction_OneofUnmarshaler, _Reaction_OneofSizer, []interface{}{
		(*Reaction_FaultDelay)(nil),
		(*Reaction_TrafficBalance)(nil),
		(*Reaction_TrafficRouting)(nil),
	}
}

func _Reaction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Reaction)
	// params
	switch x := m.Params.(type) {
	case *Reaction_FaultDelay:
		b.EncodeVarint(2002<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FaultDelay); err != nil {
			return err
		}
	case *Reaction_TrafficBalance:
		b.EncodeVarint(2101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TrafficBalance); err != nil {
			return err
		}
	case *Reaction_TrafficRouting:
		b.EncodeVarint(2102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TrafficRouting); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Reaction.Params has unexpected type %T", x)
	}
	return nil
}

func _Reaction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Reaction)
	switch tag {
	case 2002: // params.FaultDelay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FaultDelayParam)
		err := b.DecodeMessage(msg)
		m.Params = &Reaction_FaultDelay{msg}
		return true, err
	case 2101: // params.TrafficBalance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TrafficBalanceParam)
		err := b.DecodeMessage(msg)
		m.Params = &Reaction_TrafficBalance{msg}
		return true, err
	case 2102: // params.TrafficRouting
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TrafficRoutingParam)
		err := b.DecodeMessage(msg)
		m.Params = &Reaction_TrafficRouting{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Reaction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Reaction)
	// params
	switch x := m.Params.(type) {
	case *Reaction_FaultDelay:
		s := proto.Size(x.FaultDelay)
		n += proto.SizeVarint(2002<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reaction_TrafficBalance:
		s := proto.Size(x.TrafficBalance)
		n += proto.SizeVarint(2101<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reaction_TrafficRouting:
		s := proto.Size(x.TrafficRouting)
		n += proto.SizeVarint(2102<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ReactionConfigure struct {
	Reactions map[string]*Reaction `protobuf:"bytes,1,rep,name=reactions" json:"reactions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ReactionConfigure) Reset()                    { *m = ReactionConfigure{} }
func (m *ReactionConfigure) String() string            { return proto.CompactTextString(m) }
func (*ReactionConfigure) ProtoMessage()               {}
func (*ReactionConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReactionConfigure) GetReactions() map[string]*Reaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

type Snapshot struct {
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type CPUProfile struct {
}

func (m *CPUProfile) Reset()                    { *m = CPUProfile{} }
func (m *CPUProfile) String() string            { return proto.CompactTextString(m) }
func (*CPUProfile) ProtoMessage()               {}
func (*CPUProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type MemProfile struct {
}

func (m *MemProfile) Reset()                    { *m = MemProfile{} }
func (m *MemProfile) String() string            { return proto.CompactTextString(m) }
func (*MemProfile) ProtoMessage()               {}
func (*MemProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type NetProfile struct {
}

func (m *NetProfile) Reset()                    { *m = NetProfile{} }
func (m *NetProfile) String() string            { return proto.CompactTextString(m) }
func (*NetProfile) ProtoMessage()               {}
func (*NetProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type HardwareProfile struct {
	Cpu *CPUProfile `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	Mem *MemProfile `protobuf:"bytes,2,opt,name=mem" json:"mem,omitempty"`
	Net *NetProfile `protobuf:"bytes,3,opt,name=net" json:"net,omitempty"`
}

func (m *HardwareProfile) Reset()                    { *m = HardwareProfile{} }
func (m *HardwareProfile) String() string            { return proto.CompactTextString(m) }
func (*HardwareProfile) ProtoMessage()               {}
func (*HardwareProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *HardwareProfile) GetCpu() *CPUProfile {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *HardwareProfile) GetMem() *MemProfile {
	if m != nil {
		return m.Mem
	}
	return nil
}

func (m *HardwareProfile) GetNet() *NetProfile {
	if m != nil {
		return m.Net
	}
	return nil
}

type LanguageGo struct {
}

func (m *LanguageGo) Reset()                    { *m = LanguageGo{} }
func (m *LanguageGo) String() string            { return proto.CompactTextString(m) }
func (*LanguageGo) ProtoMessage()               {}
func (*LanguageGo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type LanguageJava struct {
}

func (m *LanguageJava) Reset()                    { *m = LanguageJava{} }
func (m *LanguageJava) String() string            { return proto.CompactTextString(m) }
func (*LanguageJava) ProtoMessage()               {}
func (*LanguageJava) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type LanguageProfile struct {
	Type LanguageType `protobuf:"varint,1,opt,name=type,enum=context_bus.LanguageType" json:"type,omitempty"`
	// Types that are valid to be assigned to Profile:
	//	*LanguageProfile_Go
	//	*LanguageProfile_Java
	Profile isLanguageProfile_Profile `protobuf_oneof:"Profile"`
}

func (m *LanguageProfile) Reset()                    { *m = LanguageProfile{} }
func (m *LanguageProfile) String() string            { return proto.CompactTextString(m) }
func (*LanguageProfile) ProtoMessage()               {}
func (*LanguageProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type isLanguageProfile_Profile interface{ isLanguageProfile_Profile() }

type LanguageProfile_Go struct {
	Go *LanguageGo `protobuf:"bytes,2002,opt,name=go,oneof"`
}
type LanguageProfile_Java struct {
	Java *LanguageJava `protobuf:"bytes,2003,opt,name=java,oneof"`
}

func (*LanguageProfile_Go) isLanguageProfile_Profile()   {}
func (*LanguageProfile_Java) isLanguageProfile_Profile() {}

func (m *LanguageProfile) GetProfile() isLanguageProfile_Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *LanguageProfile) GetType() LanguageType {
	if m != nil {
		return m.Type
	}
	return LanguageType_LanguageType_
}

func (m *LanguageProfile) GetGo() *LanguageGo {
	if x, ok := m.GetProfile().(*LanguageProfile_Go); ok {
		return x.Go
	}
	return nil
}

func (m *LanguageProfile) GetJava() *LanguageJava {
	if x, ok := m.GetProfile().(*LanguageProfile_Java); ok {
		return x.Java
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LanguageProfile) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LanguageProfile_OneofMarshaler, _LanguageProfile_OneofUnmarshaler, _LanguageProfile_OneofSizer, []interface{}{
		(*LanguageProfile_Go)(nil),
		(*LanguageProfile_Java)(nil),
	}
}

func _LanguageProfile_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LanguageProfile)
	// Profile
	switch x := m.Profile.(type) {
	case *LanguageProfile_Go:
		b.EncodeVarint(2002<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Go); err != nil {
			return err
		}
	case *LanguageProfile_Java:
		b.EncodeVarint(2003<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Java); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LanguageProfile.Profile has unexpected type %T", x)
	}
	return nil
}

func _LanguageProfile_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LanguageProfile)
	switch tag {
	case 2002: // Profile.go
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LanguageGo)
		err := b.DecodeMessage(msg)
		m.Profile = &LanguageProfile_Go{msg}
		return true, err
	case 2003: // Profile.java
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LanguageJava)
		err := b.DecodeMessage(msg)
		m.Profile = &LanguageProfile_Java{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LanguageProfile_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LanguageProfile)
	// Profile
	switch x := m.Profile.(type) {
	case *LanguageProfile_Go:
		s := proto.Size(x.Go)
		n += proto.SizeVarint(2002<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LanguageProfile_Java:
		s := proto.Size(x.Java)
		n += proto.SizeVarint(2003<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EnvironmentalSnapshot struct {
	Timestamp int64                  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Hardware  *HardwareProfile       `protobuf:"bytes,2,opt,name=hardware" json:"hardware,omitempty"`
	Language  *LanguageProfile       `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Prev      *EnvironmentalSnapshot `protobuf:"bytes,101,opt,name=prev" json:"prev,omitempty"`
	Next      *EnvironmentalSnapshot `protobuf:"bytes,102,opt,name=next" json:"next,omitempty"`
}

func (m *EnvironmentalSnapshot) Reset()                    { *m = EnvironmentalSnapshot{} }
func (m *EnvironmentalSnapshot) String() string            { return proto.CompactTextString(m) }
func (*EnvironmentalSnapshot) ProtoMessage()               {}
func (*EnvironmentalSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *EnvironmentalSnapshot) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EnvironmentalSnapshot) GetHardware() *HardwareProfile {
	if m != nil {
		return m.Hardware
	}
	return nil
}

func (m *EnvironmentalSnapshot) GetLanguage() *LanguageProfile {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *EnvironmentalSnapshot) GetPrev() *EnvironmentalSnapshot {
	if m != nil {
		return m.Prev
	}
	return nil
}

func (m *EnvironmentalSnapshot) GetNext() *EnvironmentalSnapshot {
	if m != nil {
		return m.Next
	}
	return nil
}

func init() {
	proto.RegisterType((*Record)(nil), "context_bus.Record")
	proto.RegisterType((*Payload)(nil), "context_bus.Payload")
	proto.RegisterType((*Condition)(nil), "context_bus.Condition")
	proto.RegisterType((*Prerequisite)(nil), "context_bus.Prerequisite")
	proto.RegisterType((*PrerequisiteTree)(nil), "context_bus.PrerequisiteTree")
	proto.RegisterType((*FaultDelayParam)(nil), "context_bus.FaultDelayParam")
	proto.RegisterType((*TrafficBalanceParam)(nil), "context_bus.TrafficBalanceParam")
	proto.RegisterType((*TrafficRoutingParam)(nil), "context_bus.TrafficRoutingParam")
	proto.RegisterType((*Reaction)(nil), "context_bus.Reaction")
	proto.RegisterType((*ReactionConfigure)(nil), "context_bus.ReactionConfigure")
	proto.RegisterType((*Snapshot)(nil), "context_bus.Snapshot")
	proto.RegisterType((*CPUProfile)(nil), "context_bus.CPUProfile")
	proto.RegisterType((*MemProfile)(nil), "context_bus.MemProfile")
	proto.RegisterType((*NetProfile)(nil), "context_bus.NetProfile")
	proto.RegisterType((*HardwareProfile)(nil), "context_bus.HardwareProfile")
	proto.RegisterType((*LanguageGo)(nil), "context_bus.LanguageGo")
	proto.RegisterType((*LanguageJava)(nil), "context_bus.LanguageJava")
	proto.RegisterType((*LanguageProfile)(nil), "context_bus.LanguageProfile")
	proto.RegisterType((*EnvironmentalSnapshot)(nil), "context_bus.EnvironmentalSnapshot")
	proto.RegisterEnum("context_bus.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("context_bus.RecordType", RecordType_name, RecordType_value)
	proto.RegisterEnum("context_bus.ConditionOperator", ConditionOperator_name, ConditionOperator_value)
	proto.RegisterEnum("context_bus.ConditionType", ConditionType_name, ConditionType_value)
	proto.RegisterEnum("context_bus.ReactionType", ReactionType_name, ReactionType_value)
	proto.RegisterEnum("context_bus.LanguageType", LanguageType_name, LanguageType_value)
}

func init() { proto.RegisterFile("context_bus.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1049 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xc1, 0x72, 0xe3, 0x44,
	0x10, 0x8d, 0x24, 0xc7, 0xb1, 0xdb, 0x8e, 0x3d, 0x99, 0xdd, 0x64, 0xb5, 0xa9, 0x2c, 0xe5, 0xd5,
	0xc9, 0x78, 0x49, 0x0a, 0x42, 0x15, 0x95, 0xe2, 0xc2, 0x56, 0x82, 0x49, 0x76, 0xc9, 0x26, 0x61,
	0x12, 0x4e, 0x1c, 0x5c, 0xb3, 0x76, 0xdb, 0x11, 0x6b, 0x69, 0xc4, 0x68, 0x6c, 0xe2, 0x23, 0xbf,
	0x00, 0x27, 0xee, 0x5c, 0xf8, 0x80, 0xe5, 0x43, 0xe0, 0xc2, 0xe7, 0x50, 0x33, 0x92, 0x6c, 0xc9,
	0x31, 0xa9, 0x3d, 0x49, 0xfd, 0xf4, 0xba, 0xe7, 0x75, 0xf7, 0x4c, 0x8f, 0x60, 0xab, 0x2f, 0x42,
	0x85, 0x77, 0xaa, 0xf7, 0x76, 0x12, 0x1f, 0x44, 0x52, 0x28, 0x41, 0x6b, 0x39, 0xc8, 0xfb, 0xc3,
	0x82, 0x32, 0xc3, 0xbe, 0x90, 0x03, 0xfa, 0x02, 0x4a, 0x6a, 0x16, 0xa1, 0x6b, 0xb5, 0xac, 0x76,
	0xe3, 0xf0, 0xc9, 0x41, 0xde, 0x33, 0xa1, 0xdc, 0xcc, 0x22, 0x64, 0x86, 0x44, 0xf7, 0xa0, 0xaa,
	0xfc, 0x00, 0x63, 0xc5, 0x83, 0xc8, 0xb5, 0x5b, 0x56, 0xdb, 0x61, 0x0b, 0x80, 0x3e, 0x87, 0x7a,
	0x80, 0x71, 0xcc, 0x47, 0xd8, 0x0b, 0x79, 0x80, 0xae, 0xd3, 0xb2, 0xda, 0x55, 0x56, 0x4b, 0xb1,
	0x0b, 0x1e, 0x20, 0xa5, 0x50, 0x9a, 0x4c, 0xfc, 0x81, 0x5b, 0x32, 0x9f, 0xcc, 0x3b, 0x75, 0x61,
	0x23, 0x46, 0x39, 0xf5, 0xfb, 0xe8, 0xae, 0x1b, 0x38, 0x33, 0xbd, 0x36, 0x6c, 0x5c, 0xf1, 0xd9,
	0x58, 0xf0, 0x01, 0x7d, 0x06, 0x20, 0xf1, 0xa7, 0x09, 0xc6, 0xaa, 0xe7, 0x0f, 0x8c, 0x58, 0x87,
	0x55, 0x53, 0xe4, 0xd5, 0xc0, 0xfb, 0xc5, 0x82, 0xea, 0x89, 0x08, 0x07, 0xbe, 0xf2, 0x45, 0x48,
	0x0f, 0x0a, 0x39, 0xed, 0x16, 0x72, 0x9a, 0xb3, 0x72, 0x69, 0x1d, 0x80, 0x2d, 0x92, 0x7c, 0x1a,
	0x87, 0x1f, 0xad, 0x66, 0x5f, 0x46, 0x28, 0xb9, 0x12, 0x92, 0xd9, 0x22, 0xa2, 0x8f, 0x61, 0x7d,
	0xca, 0xc7, 0x93, 0x24, 0x43, 0x87, 0x25, 0x86, 0xf7, 0x9b, 0x05, 0xf5, 0x2b, 0x89, 0x5a, 0x94,
	0x1f, 0xfb, 0x0a, 0xef, 0xd5, 0xc3, 0xba, 0x5f, 0x8f, 0x4f, 0x60, 0xbd, 0x2f, 0xc2, 0x41, 0xec,
	0xda, 0x2d, 0xa7, 0x5d, 0x3b, 0xdc, 0x59, 0xbd, 0x38, 0x4b, 0x48, 0x74, 0x07, 0xca, 0x11, 0x97,
	0x18, 0x2a, 0x77, 0x60, 0x16, 0x4e, 0x2d, 0xba, 0x0b, 0x95, 0xfe, 0xad, 0x3f, 0x1e, 0x48, 0x0c,
	0x5d, 0x6c, 0x39, 0x6d, 0x87, 0xcd, 0x6d, 0x4f, 0x01, 0xc9, 0x8b, 0xba, 0x91, 0x88, 0x74, 0x1f,
	0x4a, 0x91, 0xc4, 0xd8, 0xb5, 0xcc, 0xa2, 0x4f, 0x0b, 0x8b, 0xe6, 0xc9, 0xcc, 0xd0, 0xe8, 0x67,
	0x50, 0x1e, 0x23, 0x9f, 0x62, 0xa6, 0xf2, 0x01, 0x87, 0x94, 0xe8, 0x3d, 0x87, 0xe6, 0x37, 0x7c,
	0x32, 0x56, 0x5f, 0xe3, 0x98, 0xcf, 0xae, 0xb8, 0xe4, 0x01, 0x6d, 0x80, 0x1d, 0xc4, 0x69, 0xe7,
	0xec, 0x20, 0xf6, 0xb6, 0xe1, 0xd1, 0x8d, 0xe4, 0xc3, 0xa1, 0xdf, 0x3f, 0xe6, 0x63, 0x1e, 0xf6,
	0xd1, 0xd0, 0x72, 0x30, 0x13, 0x13, 0xe5, 0x87, 0xa3, 0x04, 0xfe, 0xd7, 0x86, 0x0a, 0x43, 0xde,
	0x37, 0xfd, 0xdd, 0x2f, 0xf4, 0xf7, 0xe9, 0xd2, 0x9e, 0x4d, 0x48, 0xb9, 0xf6, 0x7e, 0x05, 0xb0,
	0x10, 0xe3, 0xfe, 0xdd, 0x6c, 0x59, 0xed, 0xda, 0xe1, 0x5e, 0xc1, 0x6b, 0x49, 0xec, 0xd9, 0x1a,
	0xcb, 0xb9, 0xd0, 0x6f, 0xa1, 0x51, 0x94, 0xea, 0xbe, 0x27, 0x26, 0x48, 0xab, 0x10, 0x64, 0x45,
	0x3a, 0x67, 0x6b, 0x6c, 0xc9, 0x35, 0x17, 0x2c, 0x4d, 0xd0, 0xfd, 0xeb, 0x81, 0x60, 0xf9, 0x22,
	0xe4, 0x82, 0xa5, 0x30, 0x3d, 0x82, 0x4a, 0x24, 0xb1, 0xa7, 0x24, 0xea, 0xcd, 0xa8, 0x9b, 0xf3,
	0xec, 0x7f, 0x9b, 0xa3, 0x5b, 0xcf, 0x36, 0x22, 0x69, 0x5e, 0x8e, 0x2b, 0x66, 0x2f, 0xf1, 0x20,
	0xf6, 0xde, 0x5b, 0xb0, 0x95, 0x55, 0xed, 0x44, 0x84, 0x43, 0x7f, 0x34, 0x91, 0x5a, 0x66, 0x55,
	0xa6, 0x60, 0xb6, 0x51, 0xf6, 0x57, 0x16, 0x7a, 0xee, 0x32, 0x47, 0xe2, 0x6e, 0xa8, 0xe4, 0x8c,
	0x2d, 0xfc, 0x77, 0xaf, 0xa1, 0x51, 0xfc, 0x48, 0x09, 0x38, 0xef, 0x70, 0x96, 0x1e, 0x09, 0xfd,
	0x4a, 0x5f, 0x64, 0x87, 0xca, 0x36, 0xd5, 0xd8, 0x5e, 0xb9, 0x58, 0x7a, 0xd6, 0xbe, 0xb4, 0x8f,
	0x2c, 0x0f, 0xa0, 0x72, 0x1d, 0xf2, 0x28, 0xbe, 0x15, 0xca, 0xab, 0x03, 0x9c, 0x5c, 0x7d, 0x7f,
	0x25, 0xc5, 0xd0, 0x1f, 0xa3, 0xb6, 0xde, 0x60, 0x90, 0xb3, 0x2e, 0x50, 0x65, 0xd6, 0xaf, 0x16,
	0x34, 0xcf, 0xb8, 0x1c, 0xfc, 0xcc, 0x25, 0xa6, 0x18, 0xfd, 0x18, 0x9c, 0x7e, 0x34, 0x31, 0x62,
	0x6a, 0x4b, 0x23, 0x70, 0x11, 0x95, 0x69, 0x8e, 0xa6, 0x06, 0x18, 0xa4, 0x1a, 0x8b, 0xd4, 0xc5,
	0x92, 0x4c, 0x73, 0x34, 0x35, 0x44, 0x65, 0x66, 0xc4, 0x32, 0x75, 0xa1, 0x87, 0x69, 0x8e, 0x96,
	0x78, 0xce, 0xc3, 0xd1, 0x84, 0x8f, 0xf0, 0x54, 0x78, 0x0d, 0xa8, 0x67, 0xd6, 0x6b, 0x3e, 0xe5,
	0xde, 0x9f, 0x16, 0x34, 0x33, 0x20, 0x93, 0xfc, 0xd0, 0x11, 0xc8, 0xb8, 0xb9, 0x23, 0xd0, 0x01,
	0x7b, 0x24, 0xb2, 0xad, 0xff, 0x64, 0x25, 0xfb, 0x54, 0x9c, 0xad, 0x31, 0x7b, 0x24, 0xe8, 0xa7,
	0x50, 0xfa, 0x91, 0x4f, 0xb9, 0xfb, 0x4f, 0xc2, 0x5e, 0x1d, 0x5b, 0x0b, 0x3b, 0x5b, 0x63, 0x86,
	0x79, 0x5c, 0x85, 0x8d, 0xac, 0xbc, 0xbf, 0xdb, 0xb0, 0xdd, 0x0d, 0xa7, 0xbe, 0x14, 0x61, 0x80,
	0xa1, 0xe2, 0xe3, 0xac, 0x45, 0xc5, 0xbb, 0xc3, 0x5a, 0xbe, 0x3b, 0x8e, 0xa0, 0x72, 0x9b, 0x76,
	0x25, 0x2d, 0x6e, 0xf1, 0x80, 0x2e, 0xb5, 0x8c, 0xcd, 0xd9, 0xda, 0x73, 0x9c, 0x8a, 0x4a, 0x6b,
	0xbd, 0xb7, 0x52, 0xf1, 0xdc, 0x33, 0x63, 0xd3, 0x2f, 0xcc, 0x18, 0x9c, 0xba, 0x68, 0xbc, 0xbc,
	0x82, 0xd7, 0xca, 0x1c, 0xcc, 0x3c, 0x9c, 0x6a, 0xbf, 0x10, 0xef, 0x94, 0x3b, 0xfc, 0x70, 0x3f,
	0xcd, 0xef, 0xbc, 0x86, 0xda, 0x9b, 0x64, 0xf6, 0xeb, 0xce, 0x50, 0x02, 0xf5, 0x9c, 0xd9, 0x23,
	0x6b, 0xf4, 0x11, 0x34, 0x53, 0xa4, 0xc7, 0x92, 0xab, 0x8d, 0x58, 0xf4, 0x31, 0x90, 0x05, 0x18,
	0x47, 0x22, 0x8c, 0x91, 0xd8, 0x9d, 0x97, 0x00, 0x8b, 0xdb, 0x99, 0x36, 0xa1, 0xb6, 0xb0, 0x74,
	0xa4, 0x46, 0xf6, 0xf9, 0x1a, 0xc3, 0x01, 0xb1, 0xe8, 0x16, 0x6c, 0x26, 0x36, 0xc3, 0x3e, 0xfa,
	0x53, 0x1d, 0xe1, 0x07, 0xd8, 0xba, 0x77, 0xbb, 0xd1, 0x1d, 0xa0, 0xf7, 0x40, 0x1d, 0xaf, 0x0c,
	0xf6, 0xf9, 0x0d, 0xb1, 0xf4, 0xf3, 0xf4, 0x86, 0xd8, 0xc6, 0xee, 0x12, 0xc7, 0xd8, 0x5d, 0x52,
	0xd2, 0xcf, 0xee, 0x77, 0x64, 0x5d, 0x3f, 0x2f, 0xba, 0xa4, 0xdc, 0x79, 0x09, 0x9b, 0x85, 0x8b,
	0x96, 0x52, 0x68, 0x14, 0x80, 0x54, 0xe4, 0xc5, 0x24, 0xb8, 0x1c, 0xbe, 0x0a, 0xa7, 0xe2, 0x1d,
	0xb1, 0x68, 0x0d, 0x36, 0xce, 0xb9, 0xc2, 0xb0, 0x3f, 0x23, 0x76, 0xe7, 0x0e, 0xea, 0xf9, 0x51,
	0x9e, 0x64, 0xb0, 0xb0, 0x53, 0x7f, 0x33, 0xa4, 0x4f, 0x24, 0x8f, 0x6f, 0x89, 0x35, 0xb7, 0xcd,
	0xd0, 0x26, 0x36, 0xdd, 0x84, 0x6a, 0x62, 0x4b, 0x11, 0x11, 0x47, 0x4b, 0x28, 0x8e, 0x62, 0x82,
	0x39, 0x2c, 0x9d, 0xa8, 0x64, 0xd8, 0x39, 0x5e, 0x1c, 0xbf, 0x6c, 0xe5, 0xbc, 0xad, 0x57, 0xae,
	0xc2, 0xfa, 0xa5, 0xba, 0x45, 0x49, 0x2c, 0x0a, 0x50, 0x3e, 0x15, 0x7a, 0x4b, 0x11, 0x9b, 0x56,
	0xa0, 0xa4, 0xcf, 0x05, 0x71, 0xde, 0x96, 0xcd, 0x4f, 0xd7, 0xe7, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xd3, 0xe5, 0xc9, 0x63, 0x89, 0x09, 0x00, 0x00,
}
