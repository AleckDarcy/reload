syntax = "proto3";

package context_bus;

option go_package = "github.com/AleckDarcy/reload/core/context_bus/proto";

enum ConditionOperator {
    ConditionOperator_ = 0;
    LT                 = 1; // <
    GT                 = 2; // >
    LE                 = 3; // <=
    GE                 = 4; // >=
    EQ                 = 5; // ==
    NE                 = 6; // !=
}

enum ConditionType {
    ConditionType_ = 0;

    NumOfInvok = 1; // number of invocations
    Latency    = 2; // latency of message calls (e.g., functions, inter-service messages)
}

enum ConditionNodeType {
    ConditionNodeType_ = 0;

    ConditionMessage_  = 1; // e.g., EventA = 1
    ConditionLogic_    = 2; // e.g., Condition1 || Condition2
}

message ConditionMessage {
    ConditionType type   = 1;
    ConditionOperator op = 2;
    int64 value          = 3;
}

message ConditionLogic {
    LogicType type = 1;

    int64 parent        = 100;
    repeated int64 list = 101;
}

message ConditionNode {
    ConditionNodeType type   = 2;
    ConditionMessage message = 3;
    ConditionLogic logic     = 4;
}

enum LogicType {
    LogicType_ = 0;

    And_ = 1; // &&
    Or_  = 2; // ||
    // todo: other logic operators
}

enum PrerequisiteNodeType {
    PrerequisiteNodeType_ = 0;

    PrerequisiteMessage_ = 1;
    PrerequisiteLogic_   = 2;
}

message ConditionTree {
    repeated ConditionNode nodes = 1;
    repeated int64 leafIDs       = 2; // not in use
}

message PrerequisiteMessage {
    string name             = 1;
    ConditionTree cond_tree = 2;

    int64 parent        = 100;
    repeated int64 list = 101;
}

message PrerequisiteLogic {
    LogicType type = 1;

    int64 parent        = 100;
    repeated int64 list = 101;
}

message PrerequisiteNode {
    int64  id                   = 1; // for tree indexing
    PrerequisiteNodeType type   = 2;
    PrerequisiteMessage message = 3;
    PrerequisiteLogic logic     = 4;
}

// prerequisite tree
message PrerequisiteTree {
    repeated PrerequisiteNode nodes = 1;
    repeated int64 leafIDs          = 2; // not in use
}

message PrerequisiteSnapshot {
    repeated int64 value = 1;
    bool acc             = 2;
}

message PrerequisiteSnapshots {
    map<string, PrerequisiteSnapshot> snapshots = 1;
}

enum ReactionType {
    ReactionType_ = 0;

    // fault injection
    FaultCrash = 1;
    FaultDelay = 2;
    FaultDrop  = 3;

    // traffic (e.g., load-balancing, traffic shaping)
    TrafficBalance = 101;
    TrafficRouting = 102;
}

message FaultDelayParam {
    int64 ms = 1;
}

message TrafficBalanceParam {

}

message TrafficRoutingParam {

}

message ReactionConfigure {
    ReactionType type = 1;
    oneof params {
        FaultDelayParam FaultDelay = 2002;

        TrafficBalanceParam TrafficBalance = 2101;
        TrafficRoutingParam TrafficRouting = 2102;
    }
    PrerequisiteTree pre_tree = 3;
}

enum PathType {
    PathType_ = 0;

    Application = 1;
    Library     = 2;
}

message Path {
    PathType type        = 1;
    repeated string path = 2;
}

message AttributeConfigure {
    string name = 1;
    Path path   = 2;
}

message TimestampConfigure {
    string format = 1;
}

message StackTraceConfigure {

}

enum LogOutType {
    LogOutType_ = 0; // omit

    Stdout = 1;
    Stderr = 2;
    File   = 3;
}

message LoggingConfigure {
    TimestampConfigure timestamp      = 1;
    StackTraceConfigure stacktrace    = 2;
    repeated AttributeConfigure attrs = 3;
    LogOutType out                    = 4;
}

message TracingConfigure {
    string name                       = 1;
    string prev_name                  = 2; // event pair
    repeated AttributeConfigure attrs = 3;
}

enum MetricType {
    MetricType_ = 0;

    Counter = 1;
    Gauge = 2;
    Histogram = 3;
    Summary = 4;
}

message MetricsConfigure {
    MetricType type                   = 1;
    string name                       = 2;
    string prev_name                  = 3; // event pair
    repeated AttributeConfigure attrs = 4; // labels
}

enum ObservationType {
    ObservationType_ = 0;

    ObservationSingle = 1;
    ObservationStart  = 2;
    ObservationInter  = 3; // intermediate
    ObservationEnd    = 4;
}

message ObservationConfigure {
    ObservationType type              = 1;
    LoggingConfigure logging          = 2;
    TracingConfigure tracing          = 3;
    repeated MetricsConfigure metrics = 4;
}

message Configure {
    map<string, ReactionConfigure> reactions       = 1; // <event, reaction>
    map<string, ObservationConfigure> observations = 2; // <event, observation>
}

/******************** Environmental Profile ********************/
message CPUProfile {
    double percent = 1;
}

message MemProfile {
    uint64 total       = 1;
    uint64 available   = 2;
    uint64 used        = 3;
    double usedPercent = 4;
    uint64 free        = 5;
}

message NetProfile {
    uint64 bytesSent   = 1;
    uint64 bytesRecv   = 2;
    uint64 packetsSent = 3;
    uint64 packetsRecv = 4;
    uint64 errin       = 5;
    uint64 errout      = 6;
    uint64 dropin      = 7;
    uint64 dropout     = 8;
}

message HardwareProfile {
    CPUProfile cpu = 1;
    MemProfile mem = 2;
    NetProfile net = 3;
}

enum LanguageType {
    LanguageType_ = 0;
    Other         = 1; // un-specified languages that doesn't need or support language profile
    Golang        = 2;
    Java          = 3;
}

message LanguageGo {
    uint64 HeapSys     = 1; // HeapSys is bytes of heap memory obtained from the OS.
    uint64 HeapAlloc   = 2; // HeapAlloc is bytes of allocated heap objects.
    uint64 HeapInuse   = 3; // HeapInuse is bytes in in-use spans.
    uint64 StackSys    = 4; // StackSys is bytes of stack memory obtained from the OS.
    uint64 StackInuse  = 5; // StackInuse is bytes in stack spans.
    uint64 MSpanInuse  = 6; // MSpanInuse is bytes of allocated mspan structures.
    uint64 MSpanSys    = 7; // MSpanSys is bytes of memory obtained from the OS for mspan
    uint64 MCacheInuse = 8; // MCacheInuse is bytes of allocated mcache structures.
    uint64 MCacheSys   = 9; // MCacheSys is bytes of memory obtained from the OS for mcache structures.

    uint64 LastGC        = 101; // NextGC is the target heap size of the next GC cycle.
    uint64 NextGC        = 102; // LastGC is the time the last garbage collection finished, as nanoseconds since 1970.
    double GCCPUFraction = 103; // GCCPUFraction is the fraction of this program's available CPU time used by the GC since the program started.
}

message LanguageJava {

}

message LanguageProfile {
    LanguageType type = 1;
    oneof Profile {
        LanguageGo go     = 2002;
        LanguageJava java = 2003;
    }
}

message EnvironmentalProfile {
    int64 timestamp          = 1;
    HardwareProfile hardware = 2;
    LanguageProfile language = 3;

    int64 prev = 101;
    int64 next = 102;
}

/******************** Event Data ********************/
/******************** Event Representation */
message EventWhen {
    int64 time = 1;
}

enum AttributeValueType {
    AttributeValueType_ = 0;
    AttributeValueStr   = 1;
    AttributeValueAttr  = 2;
}

message AttributeValue {
    AttributeValueType type = 1;
    string str              = 2;
    Attributes struct       = 3;
}

message Attributes {
    map<string, AttributeValue> attrs = 1;
}

message CodeBaseInfo {
    string name = 1;
    string file = 2;
    int64 line  = 3;
}

message EventWhere {
    Attributes attrs  = 1;
    string stacktrace = 2;
}

enum EventRecorderType {
    EventRecorderType_          = 0;
    EventRecorderServiceHandler = 1;
    EventRecorderFunction       = 2;
    EventRecorderThirdParty     = 3;
}

message EventRecorder {
    EventRecorderType type = 1;
    string name            = 2;
}

message EventMessage {
    Attributes attrs    = 1;
    string message      = 2;
    repeated Path paths = 3;
}

message LibrariesMessage {
    map<string, EventMessage> libraries = 1; // key: underlying library name; value: attributes and message
}

message EventWhat {
    EventMessage application   = 1; // application developer message
    LibrariesMessage libraries = 2; // underlying libraries message
}

message EventRepresentation {
    EventWhen when         = 1;
    EventWhere where       = 2;
    EventRecorder recorder = 3;
    EventWhat what         = 4;
}

/******************** Event Metadata */
message ParentChildPointers {
    uint64 parent            = 1;
    repeated uint64 children = 2;
}

message EventMetadata {
    uint64 id               = 1;
    ParentChildPointers pcp = 2; // parent-children pointer
    int64 esp               = 3; // environmental snapshot pointer
}

/******************** Event Data */
message EventData {
    EventRepresentation event = 1;
    EventMetadata metadata    = 2;
    EventData prevEventData   = 3;
}

/******************** from 3mb WIP */
enum MessageType {
    MessageType_     = 0;
    Message_Request  = 1;
    Message_Response = 2;
}

enum RecordType {
    RecordType_   = 0;
    RecordSend    = 1;
    RecordReceive = 2;
}

message Record {
    RecordType type     = 1;
    int64 timestamp     = 2;
    string message_name = 3;
    string uuid         = 4;
    string service      = 5;
}

/******************** Integration ********************/
message Payload {
    int64 request_id                = 1;
    int64 config_id                 = 2;
    PrerequisiteSnapshots snapshots = 3;
}
